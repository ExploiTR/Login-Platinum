package app.exploitr.login.platinum.network;

import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_ASSOCIATED;
import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_LOGIN_ADDRESS;
import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_LOGIN_ARGS;
import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_LOGIN_HEADERS;
import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_LOGIN_REQ_TYPE;
import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_LOGOUT_ADDRESS;
import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_LOGOUT_ARGS;
import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_LOGOUT_HEADERS;
import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_LOGOUT_REQ_TYPE;
import static app.exploitr.login.platinum.network.Sync.ISP_PROFILE_NAME;
import static app.exploitr.login.platinum.network.Sync.USER_PROFILE_NAME;

import androidx.annotation.NonNull;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.SetOptions;

import java.util.HashMap;
import java.util.Map;

import app.exploitr.login.platinum.models.ISPDataModel;
import app.exploitr.login.platinum.models.UserDataModel;
import io.realm.RealmList;

public class SyncHelper {

    static void uploadIspConfig(ISPDataModel isp_l, CollectionReference root, SyncHelperListener listener) {
        Map<String, Object> data = new HashMap<>();
        data.put(ISP_PROFILE_NAME, isp_l.getIspName());
        data.put(ISP_PROFILE_LOGIN_ADDRESS, isp_l.getLoginAddress());
        data.put(ISP_PROFILE_LOGOUT_ADDRESS, isp_l.getLogoutAddress());
        data.put(ISP_PROFILE_LOGIN_REQ_TYPE, isp_l.getRequestTypeLogin());
        data.put(ISP_PROFILE_LOGOUT_REQ_TYPE, isp_l.getRequestTypeLogout());
        data.put(ISP_PROFILE_LOGIN_ARGS, listToStringArr(isp_l.getLoginArguments()));
        data.put(ISP_PROFILE_LOGIN_HEADERS, listToStringArr(isp_l.getLoginHeaders()));
        data.put(ISP_PROFILE_LOGOUT_ARGS, listToStringArr(isp_l.getLogoutArguments()));
        data.put(ISP_PROFILE_LOGOUT_HEADERS, listToStringArr(isp_l.getLogoutHeaders()));

        root.document(String.valueOf(isp_l.getIsp_profile_id()))
                .set(data, SetOptions.merge())
                .addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        listener.onJobDone(task);
                    }
                });
    }

    public static void uploadUserConfig(UserDataModel usr_l, CollectionReference root, SyncHelperListener listener) {
        Map<String, Object> data = new HashMap<>();
        data.put(USER_PROFILE_NAME, usr_l.getProfile_name());
        data.put(ISP_PROFILE_ASSOCIATED, usr_l.getIsp_profile_for_profile());

        for (var header : usr_l.getLoginHeaders()) {
            data.put(header.getKey(), header.getValue());
        }
        for (var header : usr_l.getLogoutHeaders()) {
            data.put(header.getKey(), header.getValue());
        }
        for (var header : usr_l.getLoginArguments()) {
            data.put(header.getKey(), header.getValue());
        }
        for (var header : usr_l.getLogoutArguments()) {
            data.put(header.getKey(), header.getValue());
        }

        root.document(String.valueOf(usr_l.getProfile_id()))
                .set(data, SetOptions.merge()).addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        listener.onJobDone(task);
                    }
                });
    }

    static void updateRemoteVersion(VersionUpdateListener listener) {
        long newVar = 1;
        //so basically rewrite 1,1 both local and remote version, now we start with 0,0 at local/remote so no problem and if
        //loc>1 then we can upload and downgrade(rewrite) local version.
        Map<String, Object> var = new HashMap<>();
        var.put(FireDataProvider.FIRE_USER_DATA_VERSION, newVar);
        FireDataProvider.userDataDocument(FirebaseAuth.getInstance().getCurrentUser().getUid())
                .set(var, SetOptions.merge()).addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        if (task.isSuccessful()) {
                            listener.update(newVar);
                        } else {
                            listener.onFail();
                        }
                    }
                });
    }

    static String[] listToStringArr(RealmList<String> arr) {
        String[] arr_new = new String[arr.size()];
        var i = 0;
        for (var x : arr) {
            arr_new[i++] = x;
        }
        return arr_new;
    }

    interface VersionUpdateListener {
        void update(long version);

        void onFail();
    }

    interface SyncHelperListener {
        void onJobDone(Task<Void> task);
    }
}
