/*
 * Copyright (C) 2015 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package app.exploitr.login.platinum.helpers;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.content.ContextCompat;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okio.Buffer;
import okio.BufferedSource;
import okio.ForwardingSource;
import okio.Okio;
import okio.Source;

public final class SpeedTester {

    private static OkHttpClient client;
    private final static String OKHTTP_TAG = "TOG";
    private static long curTime = 0;
    private static long lastTimeDone = 0;

    public static void testSpeed(Context context, String link, SpeedListener listener) {

    }

    private static void legacyDownloader(String link, SpeedListener listener) {
        try {
            URL url = new URL(link);
            HttpURLConnection httpConnection = (HttpURLConnection) (url.openConnection());
            long completeFileSize = httpConnection.getContentLength();

            BufferedInputStream in = new BufferedInputStream(httpConnection.getInputStream());
            FileOutputStream fos = new FileOutputStream("package.zip");
            BufferedOutputStream bout = new BufferedOutputStream(
                    fos, 1024);
            byte[] data = new byte[1024];
            long downloadedFileSize = 0;
            int x = 0;
            while ((x = in.read(data, 0, 1024)) >= 0) {
                downloadedFileSize += x;

                final int currentProgress = (int) ((((double) downloadedFileSize) / ((double) completeFileSize)) * 100000d);

                bout.write(data, 0, x);
            }
            bout.close();
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /*
     * Deletes the file PRDownloader creates.
     * doesn't check the execution result, if file exists gets deleted or it returns false?
     * */
    private static void deletePreviousFile(Context context) {
        new File(ContextCompat.getDataDir(context).getAbsolutePath() + "/test.mp4").delete();
    }

    /* Keeps record of time and read done to calculate speed from total download w.r.t time difference
     * Also calculates percentage done and updates to listener
     * Updates @2hz
     * */
    private static void calculateSpeed(long bytesRead, long contentLength, SpeedListener listener) {
        long diff = System.currentTimeMillis() - curTime;
        long diffRead = bytesRead - lastTimeDone;
        if (diff >= 500) {
            var speed = (diffRead * 2.0f) / (1024f * 1024);
            var percent = (bytesRead * 100f) / contentLength;
            lastTimeDone = bytesRead;
            curTime = System.currentTimeMillis();

            //trying to lift this from this q
            new Handler(Looper.getMainLooper()).post(() -> listener.onSpeedTestInProgress(speed, percent, false));
        }
    }

    public interface SpeedListener {
        void onSpeedTestInProgress(float speed, float percent, boolean complete);

        void onSpeedTestFail(@Nullable Error exception);
    }

    /* : Highlight : Unused Code : okhttp driver code
        boolean[] firstUpdate = {true};
        testSpeedInternal(link, new OkHttpProgressListener() {
            @Override
            public void onProgress(long bytesRead, long contentLength, boolean done) {
                if (done) {
                    new Handler(Looper.getMainLooper()).post(() -> listener.onSpeedTestInProgress(0, 100, true));
                } else {
                    if (firstUpdate[0]) {
                        firstUpdate[0] = false;
                        if (contentLength == -1) {
                            new Handler(Looper.getMainLooper()).post(() -> listener.onSpeedTestFail(new IOException("Content length = -1 : testSpeed()")));
                        } else {
                            System.out.format("content-length: %d\n", contentLength);
                        }
                    }

                    if (contentLength != -1) {
                        calculateSpeed(bytesRead, contentLength, listener);
                    } else {
                        new Handler(Looper.getMainLooper()).post(() -> listener.onSpeedTestFail(new IOException("Content length = -1 : testSpeed()")));

                        // go through the q/running calls and cancel if the tag matches:
                        if (client != null) {
                            for (Call call : client.dispatcher().queuedCalls()) {
                                if (call.request().tag().equals(OKHTTP_TAG))
                                    call.cancel();
                            }

                            for (Call call : client.dispatcher().runningCalls()) {
                                if (call.request().tag().equals(OKHTTP_TAG))
                                    call.cancel();
                            }
                        }
                    }
                }
            }

            @Override
            public void onTestFail(@Nullable Exception exception) {
                new Handler(Looper.getMainLooper()).post(() -> listener.onSpeedTestFail(exception));
            }
        });
        */

    private static void testSpeedInternal(String link, OkHttpProgressListener okHttpProgressListener) {
        new Thread(() -> {
            Request request = new Request.Builder()
                    .url(link)
                    .tag(OKHTTP_TAG)
                    .build();

            client = new OkHttpClient.Builder()
                    .addNetworkInterceptor(chain -> {
                        Response originalResponse = chain.proceed(chain.request());
                        return originalResponse.newBuilder()
                                .body(new ProgressResponseBody(originalResponse.body(), okHttpProgressListener))
                                .build();
                    })
                    .build();

            curTime = System.currentTimeMillis();
            try (Response response = client.newCall(request).execute()) {
                Log.d(Constants.DEBUG_TAG, String.valueOf(response.body().contentLength()));
                if (!response.isSuccessful())
                    okHttpProgressListener.onTestFail(new IOException("Unexpected code " + response));
                else
                    response.body().close();
            } catch (IOException e) {
                okHttpProgressListener.onTestFail(e);
            }
        }).start();
    }

    private static class ProgressResponseBody extends ResponseBody {

        private final ResponseBody responseBody;
        private final OkHttpProgressListener okHttpProgressListener;

        private BufferedSource bufferedSource;

        ProgressResponseBody(ResponseBody responseBody, OkHttpProgressListener okHttpProgressListener) {
            this.responseBody = responseBody;
            this.okHttpProgressListener = okHttpProgressListener;
        }

        @Override
        public MediaType contentType() {
            return responseBody.contentType();
        }

        @Override
        public long contentLength() {
            return responseBody.contentLength();
        }

        @NonNull
        @Override
        public BufferedSource source() {
            if (bufferedSource == null) {
                bufferedSource = Okio.buffer(source(responseBody.source()));
            }
            return bufferedSource;
        }

        private Source source(Source source) {
            return new ForwardingSource(source) {
                long totalBytesRead = 0L;

                // read() returns the number of bytes read, or -1 if this source is exhausted.
                @Override
                public long read(@NonNull Buffer sink, long byteCount) throws IOException {
                    long bytesRead = super.read(sink, byteCount);
                    totalBytesRead += bytesRead != -1 ? bytesRead : 0;
                    okHttpProgressListener.onProgress(totalBytesRead, responseBody.contentLength(), bytesRead == -1);
                    return bytesRead;
                }
            };
        }
    }

    private interface OkHttpProgressListener {
        void onProgress(long bytesRead, long contentLength, boolean done);

        void onTestFail(@Nullable Exception exception);
    }
}
