package app.exploitr.login.platinum.ui.fragments.dashboard;

import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.DataSource;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.engine.GlideException;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.target.Target;

import java.io.IOException;

import app.exploitr.login.platinum.database.UserProfileDB;
import app.exploitr.login.platinum.databinding.FragmentDashboardBinding;
import app.exploitr.login.platinum.helpers.SimpleFunctions;
import app.exploitr.login.platinum.models.ISPDataModel;
import app.exploitr.login.platinum.models.RealmController;
import app.exploitr.login.platinum.ui.dialogues.ISPListDialog;
import app.exploitr.login.platinum.ui.dialogues.UserListDialog;
import io.realm.RealmAny;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class DashboardFragment extends Fragment {

    private FragmentDashboardBinding binding;
    private long selectedIspProfile;
    private long selectedUserProfile;

    private boolean loggedIn = false;

    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {

        binding = FragmentDashboardBinding.inflate(inflater, container, false);

        binding.ispProfileSelect.setOnClickListener(view ->
                ISPListDialog.newInstance((indexInRealm, model, adapter) -> {
                    selectedIspProfile = indexInRealm;
                    binding.ispSelectedText.setText(model.getIspName());
                }).show(getParentFragmentManager(), "ex?"));

        binding.userProfileSelect.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                UserListDialog.newInstance((indexInRealm, model, adapter) -> {
                            binding.userSelectedText.setText(model.getProfile_name());
                            selectedUserProfile = model.getProfile_id();
                        }, selectedIspProfile)
                        .show(getParentFragmentManager(), "ex?");
            }
        });

        binding.connectDisconnect.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkCurrentStatus();

                if (!loggedIn) {
                    connectToInternet(connected -> {
                        if (connected) {
                            loggedIn = true;
                            binding.connectDisconnect.setText("Disconnect");
                        }
                    });
                } else {
                    disconnectFromInternet();
                }
            }
        });

        if (new UserProfileDB(getContext()).isDataUpdated()) {
            updateViews();
            //todo L: test
        }

        return binding.getRoot();
    }

    private void disconnectFromInternet() {
    }

    private void connectToInternet(ConnectionOperation operation) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                var ispProfile = RealmController.getInstance().getIspProfileByID(RealmAny.valueOf(selectedIspProfile));
                var userProfile = RealmController.getInstance().getUserProfileByID(RealmAny.valueOf(selectedUserProfile));

                OkHttpClient client = new OkHttpClient.Builder().build();
                FormBody.Builder formBuilder = new FormBody.Builder();
                for (var entry : userProfile.getLoginArguments()) {
                    formBuilder.add(entry.getKey(), entry.getValue());
                }
                RequestBody formBody = formBuilder.build();

                Request.Builder builder = new Request.Builder()
                        .url(ispProfile.getLoginAddress());

                if (ispProfile.getRequestTypeLogin() == ISPDataModel.REQUEST_TYPE_POST)
                    builder.post(formBody);
                else
                    builder.get();

                builder.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.61/63 Safari/537.36");

                for (var data : userProfile.getLoginHeaders()) {
                    builder.addHeader(data.getKey(), data.getValue());
                }

                Response response = null;
                try {
                    response = client.newCall(builder.build()).execute();
                    if (response != null) {
                        if (response.body() != null) {
                            response.body().close();
                        }
                    }
                    callFromMainThread(operation, true);
                } catch (IOException e) {
                    e.printStackTrace();
                    if (response != null) {
                        if (response.body() != null) {
                            response.body().close();
                        }
                    }
                    callFromMainThread(operation, false);
                }
            }
        }).start();
    }

    private void callFromMainThread(ConnectionOperation operation, boolean status) {
        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {
                operation.onConnection(status);
            }
        });
    }

    /*
     * Check current internet connection status and organize
     * handles checking current condition and updating views as usual
     * blocking method
     * */
    private void checkCurrentStatus() {

    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

    interface ConnectionOperation {
        void onConnection(boolean connected);
    }

    private void updateViews() {
        var usr = new UserProfileDB(getContext());
        if (usr.isDataUpdated()) {
            String[] name = usr.getUsername().split(" ");
            binding.firstName.setText(name[0].length() > 0 ? name[0] : "Unknown");
            binding.lastName.setText(name[1].length() > 0 ? name[1] : "Unknown");

            loadPhoto(usr.getProfileUrl());

            binding.joinTimingText.setText(SimpleFunctions.formattedTimeDiff((String) usr.getJoiningDate()));
        }
    }

    private void loadPhoto(String ph_uri) {
        Glide.with(this)
                .load(ph_uri)
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .addListener(new RequestListener<>() {
                    @Override
                    public boolean onLoadFailed(@Nullable GlideException e, Object model,
                                                Target<Drawable> target, boolean isFirstResource) {
                        //todo handle load failed
                        return false;
                    }

                    @Override
                    public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target,
                                                   DataSource dataSource, boolean isFirstResource) {
                        return false;
                    }
                })
                .into(binding.profilePhotoView);
    }
}