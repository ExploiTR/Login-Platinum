package app.exploitr.login.platinum.network;

import androidx.annotation.NonNull;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QuerySnapshot;

import app.exploitr.login.platinum.BuildConfig;

public class FireDataProvider {
    private static final String FIRE_USER_DATA_COLLECTION_NAME = "userdata_" + BuildConfig.APPLICATION_ID.replace(".", "");
    private static final String FIRE_USER_DATA_COLLECTION_ISP_LIST = "isp_list";
    private static final String FIRE_USER_DATA_COLLECTION_USER_CONFIG_LIST = "user_list";
    public static final String FIRE_USER_DATA_JOINING_DATE = "joining_date";
    public static final String FIRE_USER_DATA_VERSION = "userdata_version";

    public static FirebaseFirestore store() {
        return FirebaseFirestore.getInstance();
    }

    public static CollectionReference root() {
        return store().collection(FIRE_USER_DATA_COLLECTION_NAME);
    }

    public static DocumentReference userDataDocument(@NonNull String userid) {
        return root().document(userid);
    }

    public static CollectionReference userDataIspList(@NonNull String userid) {
        return userDataDocument(userid).collection(FIRE_USER_DATA_COLLECTION_ISP_LIST);
    }

    public static CollectionReference userDataUserConfigList(@NonNull String userid) {
        return userDataDocument(userid).collection(FIRE_USER_DATA_COLLECTION_USER_CONFIG_LIST);
    }

    public static void download(CollectionReference reference, FireDataListenerForCollections listener) {
        reference.get().addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {
            @Override
            public void onSuccess(QuerySnapshot queryDocumentSnapshots) {
                listener.onSuccess(queryDocumentSnapshots);
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                listener.onFail(e);
            }
        });
    }

    public static void download(DocumentReference reference, FireDataListenerForDocuments listener) {
        reference.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
            @Override
            public void onSuccess(DocumentSnapshot documentSnapshot) {
                listener.onSuccess(documentSnapshot);
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                listener.onFail(e);
            }
        });
    }

    public interface FireDataListenerForCollections {
        void onSuccess(QuerySnapshot data);

        void onFail(Exception e);
    }

    public interface FireDataListenerForDocuments {
        void onSuccess(DocumentSnapshot data);

        void onFail(Exception e);
    }
}
