package app.exploitr.login.platinum.network;

import static android.app.Activity.RESULT_OK;

import android.net.Uri;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.IntentSenderRequest;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.auth.api.identity.BeginSignInRequest;
import com.google.android.gms.auth.api.identity.BeginSignInResult;
import com.google.android.gms.auth.api.identity.Identity;
import com.google.android.gms.auth.api.identity.SignInClient;
import com.google.android.gms.auth.api.identity.SignInCredential;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.auth.UserProfileChangeRequest;

import app.exploitr.login.platinum.R;

public class AuthProvider {

    //*#*#66382723#*#* - reset one tap blacklist

    private static final int REQ_ONE_TAP = 234;
    private SignInClient oneTapClient;
    private BeginSignInRequest signInRequest;
    private ActivityResultLauncher<IntentSenderRequest> oneTapLauncher;
    private FirebaseAuth mAuth;
    private AppCompatActivity activity;
    private AuthListener listener;

    private void startSignIn(AppCompatActivity context, AuthListener listener) {
        activity = context;
        createSignInRequest();
        oneTapClient.beginSignIn(signInRequest)
                .addOnSuccessListener(context, new OnSuccessListener<BeginSignInResult>() {
                    @Override
                    public void onSuccess(BeginSignInResult result) {
                        oneTapLauncher.launch(new IntentSenderRequest.Builder(result.getPendingIntent().getIntentSender()).build());
                    }
                })
                .addOnFailureListener(context, new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        listener.onAuthFailure();
                    }
                });
    }

    private void createSignInRequest() {
        oneTapClient = Identity.getSignInClient(activity);
        oneTapLauncher = loginResultHandler();
        mAuth = FirebaseAuth.getInstance();
        signInRequest = BeginSignInRequest.builder()
                .setGoogleIdTokenRequestOptions(BeginSignInRequest.GoogleIdTokenRequestOptions.builder()
                        .setSupported(true)
                        .setServerClientId(activity.getString(R.string.server_client_id))
                        .setFilterByAuthorizedAccounts(true)
                        .build())
                .setPasswordRequestOptions(BeginSignInRequest.PasswordRequestOptions.builder()
                        .setSupported(false)
                        .build())
                .setAutoSelectEnabled(true)
                .build();
    }

    private ActivityResultLauncher<IntentSenderRequest> loginResultHandler() {
        return activity.registerForActivityResult(new ActivityResultContracts.StartIntentSenderForResult(), result -> {
            // handle intent result here
            if (result.getResultCode() == RESULT_OK) {
                SignInCredential credential = null;
                try {
                    credential = oneTapClient.getSignInCredentialFromIntent(result.getData());
                    String idToken = credential.getGoogleIdToken();
                    if (idToken != null) {
                        authenticateFirebase(idToken, credential.getDisplayName(), credential.getProfilePictureUri());
                    } else {
                        listener.onAuthFailure();
                    }
                } catch (ApiException e) {
                    e.printStackTrace();
                }
            } else {
                listener.onAuthFailure();
            }
        });
    }

    private void authenticateFirebase(String idToken, String name, Uri profilePictureUri) {
        AuthCredential firebaseCredential = GoogleAuthProvider.getCredential(idToken, null);
        FirebaseAuth.getInstance().addAuthStateListener(new FirebaseAuth.AuthStateListener() {
            @Override
            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {
                FirebaseUser user = firebaseAuth.getCurrentUser();
                if (user != null) {
                    if (!name.isEmpty() && profilePictureUri != null) {
                        user.updateProfile(new UserProfileChangeRequest.Builder().setDisplayName(name).setPhotoUri(profilePictureUri).build());
                        //do I need to?
                    }
                    listener.onAuthSuccess();
                } else {
                    listener.onAuthFailure();
                }
            }
        });
        mAuth.signInWithCredential(firebaseCredential)
                .addOnCompleteListener(activity, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if (task.isSuccessful()) {
                            // Sign in success, update UI with the signed-in user's information
                            //not reliable for user login checking use auth-state-listener
                        } else {
                            listener.onAuthFailure();
                        }
                    }
                });
    }

    public void signIn(AppCompatActivity activity_, AuthListener listener_) {
        startSignIn(activity_, listener_);
    }

    public void signOut() {
        FirebaseAuth.getInstance().signOut();
    }

    public interface AuthListener {
        void onAuthSuccess();

        void onAuthFailure();
    }
}
