package app.exploitr.login.platinum.ui.dialogues;

import android.content.Context;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.fragment.app.FragmentActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.bottomsheet.BottomSheetDialogFragment;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;

import java.util.List;

import app.exploitr.login.platinum.R;
import app.exploitr.login.platinum.databinding.DataListLayoutBinding;
import app.exploitr.login.platinum.models.ISPDataModel;
import app.exploitr.login.platinum.models.RealmController;
import app.exploitr.login.platinum.models.UserDataModel;
import app.exploitr.login.platinum.models.UserKeyMapping;
import io.realm.RealmAny;
import io.realm.RealmList;
import io.realm.RealmResults;

public class UserListDialog extends BottomSheetDialogFragment {

    private DataListLayoutBinding binding;
    private RealmResults<UserDataModel> mData;
    private UserListDialog.UserDataModelClickListener clickListener;
    private UserListDialog.UserDataModelSelectListener selectListener;
    private static UserListDialog localInstance;
    private static long selectedIsp;

    private RealmList<UserKeyMapping> loginArgumentContents;
    private RealmList<UserKeyMapping> logoutArgumentContents;
    private RealmList<UserKeyMapping> loginHeadersContents;
    private RealmList<UserKeyMapping> logoutHeadersContents;

    private static final int LOGIN_ARG_CONTENTS = 344;
    private static final int LOGOUT_ARG_CONTENTS = 345;
    private static final int LOGIN_HEAD_CONTENTS = 346;
    private static final int LOGOUT_HEAD_CONTENTS = 347;


    public static UserListDialog newInstance(UserDataModelSelectListener listener, long selectedIspProfile) {
        localInstance = new UserListDialog();
        localInstance.selectListener = listener;
        selectedIsp = selectedIspProfile;
        return localInstance;
    }

    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        binding = DataListLayoutBinding.inflate(inflater, container, false);
        mData = RealmController.getInstance().getUserProfileList();
        clickListener = new UserDataModelClickListener() {
            @Override
            public void editAction(int indexInRealm, UserDataModel model, UserDataModelAdapter adapter) {
                setupEditUserProfile(model, () -> adapter.notifyItemChanged(indexInRealm));
            }

            @Override
            public void deleteAction(int indexInRealm, UserDataModel model, UserDataModelAdapter adapter) {
                RealmController.getInstance().deleteUserProfileByID(RealmAny.valueOf(model.getProfile_id()));
                adapter.notifyItemRemoved(indexInRealm);
            }

            @Override
            public void selectAction(int indexInRealm, UserDataModel model, UserDataModelAdapter adapter) {
                selectListener.onSelect(indexInRealm, model, adapter);
            }

        };
        return binding.getRoot();
    }

    private void setupAddUserProfile(UserDataModelEditListener listener) {
        var inflater = ((LayoutInflater) requireContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE));
        View layout = inflater.inflate(R.layout.add_user_profile_layout, null, false);

        loginArgumentContents = new RealmList<>();
        logoutArgumentContents = new RealmList<>();
        loginHeadersContents = new RealmList<>();
        logoutHeadersContents = new RealmList<>();

        TextInputEditText input_user_profile_name = layout.findViewById(R.id.input_user_profile_name);
        AppCompatTextView input_user_profile_id = layout.findViewById(R.id.input_user_profile_id);

        LinearLayoutCompat login_argument_container = layout.findViewById(R.id.login_argument_container);
        LinearLayoutCompat logout_argument_container = layout.findViewById(R.id.logout_argument_container);
        LinearLayoutCompat login_header_container = layout.findViewById(R.id.login_header_container);
        LinearLayoutCompat logout_header_container = layout.findViewById(R.id.logout_header_container);

        var arr = RealmController.getInstance().getIspProfileList();
        String[] names = new String[arr.size()];
        long[] ids = new long[arr.size()]; //cant trust direct referencing to independent collections
        int i = 0;
        for (ISPDataModel model : arr) {
            names[i] = model.getIspName() + " (" + model.getIsp_profile_id() + ")";
            ids[i] = model.getIsp_profile_id();
            i += 1;
        }

        AppCompatSpinner spinner = layout.findViewById(R.id.isp_select_add_user_layout);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(getContext(), android.R.layout.simple_spinner_item, names);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(adapter);
        spinner.setSelection(0);

        long[] curProfileId = new long[1];
        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                login_argument_container.removeAllViews();
                logout_argument_container.removeAllViews();
                login_header_container.removeAllViews();
                logout_header_container.removeAllViews();

                selectedIsp = ids[position];
                var isp = RealmController.getInstance().getIspProfileByID(RealmAny.valueOf(ids[position]));
                curProfileId[0] = isp.getIsp_profile_id() + (System.currentTimeMillis() / 10000);

                input_user_profile_id.setText("Generated PPID : " + String.valueOf(curProfileId[0]));

                if (isp != null) {
                    for (var arg : isp.getLoginArguments()) {
                        var loc = inputChildElement(inflater, arg);
                        ((TextInputEditText) loc.findViewById(R.id.input_isp_name)).addTextChangedListener(inputListBuilder(LOGIN_ARG_CONTENTS, arg));
                        login_argument_container.addView(loc);
                    }
                    for (var arg : isp.getLogoutArguments()) {
                        var loc = inputChildElement(inflater, arg);
                        ((TextInputEditText) loc.findViewById(R.id.input_isp_name)).addTextChangedListener(inputListBuilder(LOGOUT_ARG_CONTENTS, arg));
                        logout_argument_container.addView(loc);
                    }
                    for (var arg : isp.getLoginHeaders()) {
                        var loc = inputChildElement(inflater, arg);
                        ((TextInputEditText) loc.findViewById(R.id.input_isp_name)).addTextChangedListener(inputListBuilder(LOGIN_HEAD_CONTENTS, arg));
                        login_header_container.addView(loc);
                    }
                    for (var arg : isp.getLogoutHeaders()) {
                        var loc = inputChildElement(inflater, arg);
                        ((TextInputEditText) loc.findViewById(R.id.input_isp_name)).addTextChangedListener(inputListBuilder(LOGOUT_HEAD_CONTENTS, arg));
                        logout_header_container.addView(loc);
                    }
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        AlertDialog dialog = new AlertDialog
                .Builder(requireActivity())
                .setView(layout)
                .setCancelable(false)
                .setPositiveButton("Save", null)
                .setNegativeButton("Cancel", (dialog1, which) -> dialog1.dismiss())
                .create();

        dialog.setOnShowListener(dialog13 -> {
            Button button = dialog.getButton(AlertDialog.BUTTON_POSITIVE);
            button.setOnClickListener(view1 -> {
                var model = new UserDataModel();

                model.setProfile_name(input_user_profile_name.getText().toString());
                model.setIsp_profile_for_profile(selectedIsp);
                model.setProfile_id(curProfileId[0]);
                model.setLoginArguments(loginArgumentContents);
                model.setLogoutArguments(logoutArgumentContents);
                model.setLoginHeaders(loginHeadersContents);
                model.setLogoutHeaders(logoutHeadersContents);

                RealmController.getInstance().updateUserProfile(model);

                dialog.dismiss();

                listener.onComplete();
            });
        });

        if (!requireActivity().isFinishing())
            dialog.show();
    }

    private TextWatcher inputListBuilder(int type, String arg) {
        return new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                if (type == LOGIN_ARG_CONTENTS) {
                    loginArgumentContents.add(new UserKeyMapping(arg, s.toString()));
                }
                if (type == LOGOUT_ARG_CONTENTS) {
                    logoutArgumentContents.add(new UserKeyMapping(arg, s.toString()));
                }
                if (type == LOGIN_HEAD_CONTENTS) {
                    loginHeadersContents.add(new UserKeyMapping(arg, s.toString()));
                }
                if (type == LOGOUT_HEAD_CONTENTS) {
                    logoutHeadersContents.add(new UserKeyMapping(arg, s.toString()));
                }
            }
        };
    }

    private View inputChildElement(LayoutInflater inflater, String argument) {
        View argument_input = inflater.inflate(R.layout.user_input_argument_item, null, false);
        ((TextInputLayout) argument_input.findViewById(R.id.input_isp_name_layout)).setHint(argument);
        argument_input.setLayoutParams(new LinearLayoutCompat.LayoutParams(LinearLayoutCompat.LayoutParams.MATCH_PARENT, LinearLayoutCompat.LayoutParams.WRAP_CONTENT));
        return argument_input;
    }

    private RealmList<UserKeyMapping> getListFromText(String hint, Editable text) {
        var l_args = new RealmList<UserKeyMapping>();
        l_args.add(new UserKeyMapping(hint, text.toString()));
        return l_args;
    }

    private TextInputEditText getArgumentView(View view, String hint) {
        ((TextInputLayout) view.findViewById(R.id.input_isp_name_layout)).setHint(hint);
        return view.findViewById(R.id.input_isp_name);
    }

    private void setupEditUserProfile(UserDataModel model, UserDataModelEditListener listener) {
        var inflater = ((LayoutInflater) requireContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE));
        View layout = inflater.inflate(R.layout.add_user_profile_layout, null, false);

        loginArgumentContents = new RealmList<>();
        loginArgumentContents.addAll(model.getLoginArguments());

        logoutArgumentContents = new RealmList<>();
        logoutArgumentContents.addAll(model.getLogoutArguments());

        loginHeadersContents = new RealmList<>();
        loginHeadersContents.addAll(model.getLoginHeaders());

        logoutHeadersContents = new RealmList<>();
        logoutHeadersContents.addAll(model.getLogoutHeaders());

        TextInputEditText input_user_profile_name = layout.findViewById(R.id.input_user_profile_name);
        AppCompatTextView input_user_profile_id = layout.findViewById(R.id.input_user_profile_id);

        LinearLayoutCompat login_argument_container = layout.findViewById(R.id.login_argument_container);
        LinearLayoutCompat logout_argument_container = layout.findViewById(R.id.logout_argument_container);
        LinearLayoutCompat login_header_container = layout.findViewById(R.id.login_header_container);
        LinearLayoutCompat logout_header_container = layout.findViewById(R.id.logout_header_container);

        var arr = RealmController.getInstance().getIspProfileList();
        String[] names = new String[arr.size()];
        long[] ids = new long[arr.size()]; //cant trust direct referencing to independent collections
        int i = 0;
        for (ISPDataModel i_model : arr) {
            names[i] = i_model.getIspName() + " (" + i_model.getIsp_profile_id() + ")";
            ids[i] = i_model.getIsp_profile_id();
            i += 1;
        }

        AppCompatSpinner spinner = layout.findViewById(R.id.isp_select_add_user_layout);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(getContext(), android.R.layout.simple_spinner_item, names);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(adapter);
        spinner.setSelection(List.of(ids).indexOf(model.getIsp_profile_for_profile()));

        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                login_argument_container.removeAllViews();
                logout_argument_container.removeAllViews();
                login_header_container.removeAllViews();
                logout_header_container.removeAllViews();

                selectedIsp = ids[position];
                var isp = RealmController.getInstance().getIspProfileByID(RealmAny.valueOf(ids[position]));

                input_user_profile_id.setText("Generated PPID : " + String.valueOf(model.getProfile_id()));

                if (isp != null) {
                    for (var arg : isp.getLoginArguments()) {
                        var loc = inputChildElement(inflater, arg);
                        var tie = ((TextInputEditText) loc.findViewById(R.id.input_isp_name));
                        tie.addTextChangedListener(inputListBuilder(LOGIN_ARG_CONTENTS, arg));
                        tie.setText(getText(arg, loginArgumentContents));
                        login_argument_container.addView(loc);
                    }
                    for (var arg : isp.getLogoutArguments()) {
                        var loc = inputChildElement(inflater, arg);
                        var tie = ((TextInputEditText) loc.findViewById(R.id.input_isp_name));
                        tie.addTextChangedListener(inputListBuilder(LOGOUT_ARG_CONTENTS, arg));
                        tie.setText(getText(arg, logoutArgumentContents));
                        logout_argument_container.addView(loc);
                    }
                    for (var arg : isp.getLoginHeaders()) {
                        var loc = inputChildElement(inflater, arg);
                        var tie = ((TextInputEditText) loc.findViewById(R.id.input_isp_name));
                        tie.addTextChangedListener(inputListBuilder(LOGIN_HEAD_CONTENTS, arg));
                        tie.setText(getText(arg, logoutHeadersContents));
                        login_header_container.addView(loc);
                    }
                    for (var arg : isp.getLogoutHeaders()) {
                        var loc = inputChildElement(inflater, arg);
                        var tie = ((TextInputEditText) loc.findViewById(R.id.input_isp_name));
                        tie.addTextChangedListener(inputListBuilder(LOGOUT_HEAD_CONTENTS, arg));
                        tie.setText(getText(arg, logoutHeadersContents));
                        logout_header_container.addView(loc);
                    }
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        AlertDialog dialog = new AlertDialog
                .Builder(requireActivity())
                .setView(layout)
                .setCancelable(false)
                .setPositiveButton("Save", null)
                .setNegativeButton("Cancel", (dialog1, which) -> dialog1.dismiss())
                .create();

        dialog.setOnShowListener(dialog13 -> {
            Button button = dialog.getButton(AlertDialog.BUTTON_POSITIVE);
            button.setOnClickListener(view1 -> {
                UserDataModel new_model = new UserDataModel();

                new_model.setProfile_name(input_user_profile_name.getText().toString());
                new_model.setIsp_profile_for_profile(selectedIsp);
                new_model.setProfile_id(model.getProfile_id());
                new_model.setLoginArguments(loginArgumentContents);
                new_model.setLogoutArguments(logoutArgumentContents);
                new_model.setLoginHeaders(loginHeadersContents);
                new_model.setLogoutHeaders(logoutHeadersContents);

                RealmController.getInstance().updateUserProfile(new_model);

                dialog.dismiss();

                listener.onComplete();
            });
        });

        if (!requireActivity().isFinishing())
            dialog.show();
    }

    private String getText(String arg, RealmList<UserKeyMapping> list) {
        for (var item : list) {
            if (item.getKey().equals(arg))
                return item.getValue();
        }
        return "";
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        RecyclerView recyclerView = view.findViewById(R.id.list_of_user_profiles_recycler);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        var adapter = new UserDataModelAdapter(mData, clickListener, requireActivity());
        recyclerView.setAdapter(adapter);

        ExtendedFloatingActionButton button = view.findViewById(R.id.add_new_profile);
        button.setOnClickListener(v -> {
            setupAddUserProfile(() -> adapter.notifyItemInserted(mData.size()));
        });
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

    private static class ViewHolder extends RecyclerView.ViewHolder {
        private final TextView isp_name_display;
        private final TextView profile_name_display;
        private final TextView profile_id_display;
        private final TextView isp_profile_id_display;
        private final TextView edit_profile;
        private final TextView delete_profile;
        private final FrameLayout select_profile;

        public ViewHolder(@NonNull View itemView) {
            super(itemView);
            isp_name_display = itemView.findViewById(R.id.isp_name_display);
            profile_name_display = itemView.findViewById(R.id.profile_name_display);
            profile_id_display = itemView.findViewById(R.id.profile_id_display);
            edit_profile = itemView.findViewById(R.id.edit_profile);
            delete_profile = itemView.findViewById(R.id.delete_profile);
            select_profile = itemView.findViewById(R.id.select_profile);
            isp_profile_id_display = itemView.findViewById(R.id.p_pid_for_isp_display);
        }
    }

    public static class UserDataModelAdapter extends RecyclerView.Adapter<UserListDialog.ViewHolder> {

        private final RealmResults<UserDataModel> mItems;
        private final FragmentActivity activity;
        private final UserListDialog.UserDataModelClickListener listener;

        UserDataModelAdapter(RealmResults<UserDataModel> itemCount, UserListDialog.UserDataModelClickListener clickListener,
                             FragmentActivity fragmentActivity) {
            mItems = itemCount;
            activity = fragmentActivity;
            listener = clickListener;
        }

        @NonNull
        @Override
        public UserListDialog.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            return new UserListDialog.ViewHolder(activity.getLayoutInflater().inflate(R.layout.userdata_list_layout_item, parent, false));
        }

        @Override
        public void onBindViewHolder(UserListDialog.ViewHolder holder, int position) {
            var isp_model = RealmController.getInstance().getIspProfileByID(RealmAny.valueOf(mItems.get(position).getIsp_profile_for_profile()));
            var curItem = mItems.get(position);

            holder.isp_name_display.setText(isp_model.getIspName());
            holder.profile_name_display.setText(curItem.getProfile_name());
            holder.profile_id_display.setText("PPID : " + curItem.getProfile_id());
            holder.isp_profile_id_display.setText("ISP PPID : " + isp_model.getIsp_profile_id());

            holder.edit_profile.setOnClickListener(v -> listener.editAction(position, mItems.get(position), this));
            holder.delete_profile.setOnClickListener(v -> listener.deleteAction(position, mItems.get(position), this));
            holder.select_profile.setOnClickListener(v -> {
                listener.selectAction(position, curItem, this);
                localInstance.dismiss();
            });
        }

        @Override
        public int getItemCount() {
            return mItems.size();
        }

    }

    public interface UserDataModelClickListener {
        void editAction(int indexInRealm, UserDataModel model, UserListDialog.UserDataModelAdapter adapter);

        void deleteAction(int indexInRealm, UserDataModel model, UserListDialog.UserDataModelAdapter adapter);

        void selectAction(int indexInRealm, UserDataModel model, UserListDialog.UserDataModelAdapter adapter);
    }

    public interface UserDataModelSelectListener {
        void onSelect(int indexInRealm, UserDataModel model, UserListDialog.UserDataModelAdapter adapter);
    }

    private interface UserDataModelEditListener {
        void onComplete();
    }
}