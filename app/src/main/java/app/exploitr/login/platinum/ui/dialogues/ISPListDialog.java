package app.exploitr.login.platinum.ui.dialogues;

import android.content.Context;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.fragment.app.FragmentActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.bottomsheet.BottomSheetDialogFragment;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.textfield.TextInputEditText;

import java.util.Arrays;

import app.exploitr.login.platinum.R;
import app.exploitr.login.platinum.databinding.DataListLayoutBinding;
import app.exploitr.login.platinum.models.ISPDataModel;
import app.exploitr.login.platinum.models.RealmController;
import io.realm.RealmAny;
import io.realm.RealmList;
import io.realm.RealmResults;

public class ISPListDialog extends BottomSheetDialogFragment {

    private DataListLayoutBinding binding;
    private RealmResults<ISPDataModel> mData;
    private ISPDataModelClickListener clickListener;
    private ISPModelSelectListener selectListener;
    private static ISPListDialog localInstance;

    public static ISPListDialog newInstance(ISPModelSelectListener listener) {
        localInstance = new ISPListDialog();
        localInstance.selectListener = listener;
        return localInstance;
    }

    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        binding = DataListLayoutBinding.inflate(inflater, container, false);
        mData = RealmController.getInstance().getIspProfileList();
        clickListener = new ISPListDialog.ISPDataModelClickListener() {
            @Override
            public void editAction(int indexInRealm, ISPDataModel model, ISPListDialog.ISPDataModelAdapter adapter) {
                setupEditISPProfile(model, () -> adapter.notifyItemChanged(indexInRealm));
            }

            @Override
            public void deleteAction(int indexInRealm, ISPDataModel model, ISPListDialog.ISPDataModelAdapter adapter) {
                if (RealmController.getInstance().deleteIspProfileByID(RealmAny.valueOf(model.getIsp_profile_id()))) {
                    adapter.notifyItemRemoved(indexInRealm);
                } else {
                    Toast.makeText(getContext(), "Can't delete default profiles!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void selectAction(int indexInRealm, ISPDataModel model, ISPListDialog.ISPDataModelAdapter adapter) {
                selectListener.onSelect(indexInRealm, model, adapter);
            }
        };
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        RecyclerView recyclerView = view.findViewById(R.id.list_of_user_profiles_recycler);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        var adapter = new ISPDataModelAdapter(mData, clickListener, requireActivity());
        recyclerView.setAdapter(adapter);

        ExtendedFloatingActionButton button = view.findViewById(R.id.add_new_profile);
        button.setOnClickListener(v -> {
            setupAddISPProfile(() -> adapter.notifyItemInserted(mData.size()));
        });
    }

    private void setupAddISPProfile(ISPDataEditListener listener) {
        View view = ((LayoutInflater) requireContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE))
                .inflate(R.layout.add_isp_profile_layout, null, false);

        long curProfileId = (System.currentTimeMillis() / 10000);

        AppCompatSpinner spinner_login = view.findViewById(R.id.input_login_request_type);
        AppCompatSpinner spinner_logout = view.findViewById(R.id.input_logout_request_type);

        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
                R.array.input_request_type_entries, android.R.layout.simple_spinner_item);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner_login.setAdapter(adapter);
        spinner_logout.setAdapter(adapter);

        TextInputEditText isp_name = view.findViewById(R.id.input_isp_name);
        TextInputEditText loginUrl = view.findViewById(R.id.input_login_url);
        TextInputEditText logoutUrl = view.findViewById(R.id.input_logout_url);
        TextInputEditText loginArgs = view.findViewById(R.id.input_request_arguments_login);
        TextInputEditText loginHeaders = view.findViewById(R.id.input_request_headers_login);
        TextInputEditText logoutArgs = view.findViewById(R.id.input_request_arguments_logout);
        TextInputEditText logoutHeaders = view.findViewById(R.id.input_request_headers_logout);

        ((TextView) view.findViewById(R.id.ppid_gen)).setText("Generated PPID : " + curProfileId);

        loginArgs.addTextChangedListener(watcher(loginArgs));
        logoutArgs.addTextChangedListener(watcher(logoutArgs));
        loginHeaders.addTextChangedListener(watcher(loginHeaders));
        logoutHeaders.addTextChangedListener(watcher(logoutHeaders));


        AlertDialog dialog = new AlertDialog
                .Builder(requireActivity())
                .setView(view)
                .setCancelable(false)
                .setPositiveButton("Save", null)
                .setNegativeButton("Cancel", (dialog1, which) -> dialog1.dismiss())
                .create();

        dialog.setOnShowListener(dialog13 -> {
            Button button = dialog.getButton(AlertDialog.BUTTON_POSITIVE);
            button.setOnClickListener(view1 -> {
                if (checkInvalidInputs(isp_name, loginUrl, logoutUrl))
                    return;

                ISPDataModel model = new ISPDataModel();
                model.setIsp_profile_id(curProfileId);
                model.setIspName(isp_name.getText().toString());
                model.setLoginAddress(loginUrl.getText().toString());
                model.setLogoutAddress(logoutUrl.getText().toString());
                model.setRequestTypeLogin(spinner_login.getSelectedItemPosition());
                model.setRequestTypeLogout(spinner_logout.getSelectedItemPosition());

                var li_args = getListFromText(loginArgs.getText());
                var lo_args = getListFromText(logoutArgs.getText());

                var li_headers = getListFromText(loginHeaders.getText());
                var lo_headers = getListFromText(logoutHeaders.getText());

                if (compareCommons(li_args, lo_args, li_headers, lo_headers)) {
                    Toast.makeText(getContext(), "Common parameters in different sections!", Toast.LENGTH_SHORT).show();
                    return;
                }
                //inefficient comparisons but okay for smaller lists

                model.setLoginArguments(li_args);
                model.setLoginHeaders(li_headers);
                model.setLogoutArguments(lo_args);
                model.setLogoutHeaders(lo_headers);

                model.setImmutable(true);

                RealmController.getInstance().updateIspProfile(model);

                dialog.dismiss();

                listener.onComplete();
            });
        });

        if (!requireActivity().isFinishing())
            dialog.show();
    }

    /*
     * Checks if common argument exists
     * */
    private boolean compareCommons(RealmList<String> li_args, RealmList<String> lo_args, RealmList<String> li_headers, RealmList<String> lo_headers) {
        for (String arg : li_args) {
            if (lo_args.contains(arg)) {
                return true;
            }
            if (li_headers.contains(arg)) {
                return true;
            }
            if (lo_headers.contains(arg)) {
                return true;
            }
        }
        for (String arg : lo_args) {
            if (li_headers.contains(arg)) {
                return true;
            }
            if (lo_headers.contains(arg)) {
                return true;
            }
        }
        for (String arg : li_headers) {
            if (lo_headers.contains(arg)) {
                return true;
            }
        }

        return false;
    }

    private void setupEditISPProfile(ISPDataModel model, ISPDataEditListener listener) {
        View view = ((LayoutInflater) requireContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE))
                .inflate(R.layout.add_isp_profile_layout, null, false);

        long curProfileId = model.getIsp_profile_id();

        AppCompatSpinner spinner_login = view.findViewById(R.id.input_login_request_type);
        AppCompatSpinner spinner_logout = view.findViewById(R.id.input_logout_request_type);

        spinner_login.setSelection(model.getRequestTypeLogin());
        spinner_logout.setSelection(model.getRequestTypeLogout());

        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(getActivity(),
                R.array.input_request_type_entries, android.R.layout.simple_spinner_item);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner_login.setAdapter(adapter);
        spinner_logout.setAdapter(adapter);

        TextInputEditText isp_name = view.findViewById(R.id.input_isp_name);
        TextInputEditText loginUrl = view.findViewById(R.id.input_login_url);
        TextInputEditText logoutUrl = view.findViewById(R.id.input_logout_url);
        TextInputEditText loginArgs = view.findViewById(R.id.input_request_arguments_login);
        TextInputEditText loginHeaders = view.findViewById(R.id.input_request_headers_login);
        TextInputEditText logoutArgs = view.findViewById(R.id.input_request_arguments_logout);
        TextInputEditText logoutHeaders = view.findViewById(R.id.input_request_headers_logout);

        isp_name.setText(model.getIspName());
        loginUrl.setText(model.getLoginAddress());
        logoutUrl.setText(model.getLogoutAddress());
        loginArgs.setText(listToString(model.getLoginArguments()));
        loginHeaders.setText(listToString(model.getLoginHeaders()));
        logoutArgs.setText(listToString(model.getLogoutArguments()));
        logoutHeaders.setText(listToString(model.getLogoutHeaders()));

        ((TextView) view.findViewById(R.id.ppid_gen)).setText("Persistent PPID : " + curProfileId);

        loginArgs.addTextChangedListener(watcher(loginArgs));
        logoutArgs.addTextChangedListener(watcher(logoutArgs));
        loginHeaders.addTextChangedListener(watcher(loginHeaders));
        logoutHeaders.addTextChangedListener(watcher(logoutHeaders));

        AlertDialog dialog = new AlertDialog
                .Builder(requireActivity())
                .setView(view)
                .setCancelable(false)
                .setPositiveButton("Save", null)
                .setNegativeButton("Cancel", (dialog1, which) -> dialog1.dismiss())
                .create();

        dialog.setOnShowListener(dialog13 -> {
            Button button = dialog.getButton(AlertDialog.BUTTON_POSITIVE);
            button.setOnClickListener(view1 -> {
                if (checkInvalidInputs(isp_name, loginUrl, logoutUrl))
                    return;

                ISPDataModel temp = new ISPDataModel(); // don't directly write model outside the transaction

                temp.setIsp_profile_id(model.getIsp_profile_id());
                temp.setIspName(isp_name.getText().toString());
                temp.setLoginAddress(loginUrl.getText().toString());
                temp.setLogoutAddress(logoutUrl.getText().toString());
                temp.setRequestTypeLogin(spinner_login.getSelectedItemPosition());
                temp.setRequestTypeLogout(spinner_logout.getSelectedItemPosition());

                temp.setLoginArguments(getListFromText(loginArgs.getText()));
                temp.setLoginHeaders(getListFromText(loginHeaders.getText()));

                temp.setLogoutArguments(getListFromText(logoutArgs.getText()));
                temp.setLogoutHeaders(getListFromText(logoutHeaders.getText()));

                temp.setImmutable(model.isImmutable());

                RealmController.getInstance().updateIspProfile(temp);

                dialog.dismiss();

                listener.onComplete();
            });
        });

        if (!requireActivity().isFinishing())
            dialog.show();
    }

    private String listToString(RealmList<String> list) {
        StringBuilder builder = new StringBuilder();
        for (String value : list) {
            builder.append(value).append(",");
        }
        if (builder.length() < 3)
            return "";
        return builder.substring(0, builder.length() - 1);
    }

    private RealmList<String> getListFromText(Editable text) {
        var l_args = new RealmList<String>();
        if (text.length() < 3) {
            return l_args;
        }
        String process = text.toString();
        if (process.charAt(process.length() - 1) == ',') {
            process = process.substring(0, process.length() - 1);
        }
        l_args.addAll(Arrays.asList(process.split(",")));
        return l_args;
    }

    private boolean checkInvalidInputs(TextInputEditText isp_name,
                                       TextInputEditText loginUrl,
                                       TextInputEditText logoutUrl) {
        boolean cond = true;
        if (isp_name.getText().toString().isEmpty()) {
            cond = false;
            isp_name.setError("Empty ISP Name");
        }
        if (loginUrl.getText().toString().isEmpty()) {
            cond = false;
            loginUrl.setError("Empty Login URL");
        }
        if (logoutUrl.getText().toString().isEmpty()) {
            cond = false;
            logoutUrl.setError("Empty Logout URL");
        }
        return !cond;
    }

    private TextWatcher watcher(View view) {
        return new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                if (view instanceof TextInputEditText) {
                    TextInputEditText temp = ((TextInputEditText) view);
                    var string_to_happen = s.toString().replaceAll(" ", ",");

                    if (temp.getText().toString().equalsIgnoreCase(s.toString().replaceAll(" ", ",")))
                        return;
                    temp.setText("");
                    temp.setText(string_to_happen);
                    temp.setSelection(string_to_happen.length());
                }
            }
        };
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

    private static class ViewHolder extends RecyclerView.ViewHolder {
        private final TextView isp_name_display;
        private final TextView login_url_display;
        private final TextView profile_id_display;
        private final TextView loginParams;
        private final TextView edit_profile;
        private final TextView delete_profile;
        private final FrameLayout select_profile;
        private final ImageView default_profile_icon;

        public ViewHolder(@NonNull View itemView) {
            super(itemView);
            isp_name_display = itemView.findViewById(R.id.isp_name_display);
            login_url_display = itemView.findViewById(R.id.login_url_display);
            profile_id_display = itemView.findViewById(R.id.profile_id_display);
            edit_profile = itemView.findViewById(R.id.edit_profile);
            delete_profile = itemView.findViewById(R.id.delete_profile);
            select_profile = itemView.findViewById(R.id.select_profile);
            loginParams = itemView.findViewById(R.id.login_params);
            default_profile_icon = itemView.findViewById(R.id.default_profile_icon);
        }
    }

    public static class ISPDataModelAdapter extends RecyclerView.Adapter<ISPListDialog.ViewHolder> {

        private final RealmResults<ISPDataModel> mItems;
        private final FragmentActivity activity;
        private final ISPDataModelClickListener listener;

        ISPDataModelAdapter(RealmResults<ISPDataModel> itemCount, ISPDataModelClickListener clickListener,
                            FragmentActivity fragmentActivity) {
            mItems = itemCount;
            activity = fragmentActivity;
            listener = clickListener;
        }

        @NonNull
        @Override
        public ISPListDialog.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            return new ViewHolder(activity.getLayoutInflater().inflate(R.layout.isp_list_layout_item, parent, false));
        }

        @Override
        public void onBindViewHolder(ISPListDialog.ViewHolder holder, int position) {
            holder.isp_name_display.setText(mItems.get(position).getIspName());
            holder.login_url_display.setText(mItems.get(position).getLoginAddress());
            holder.profile_id_display.setText("PID : " + mItems.get(position).getIsp_profile_id());
            holder.loginParams.setText(String.join(",", mItems.get(position).getLoginArguments()));

            holder.edit_profile.setOnClickListener(v -> listener.editAction(position, mItems.get(position), this));
            holder.delete_profile.setOnClickListener(v -> listener.deleteAction(position, mItems.get(position), this));
            holder.select_profile.setOnClickListener(v -> {
                listener.selectAction(position, mItems.get(position), this);
                localInstance.dismiss();
            });

            if (!mItems.get(position).isImmutable()) {
                holder.delete_profile.setVisibility(View.GONE);
                holder.edit_profile.setVisibility(View.GONE);
                holder.default_profile_icon.setVisibility(View.VISIBLE);
            }
        }

        @Override
        public int getItemCount() {
            return mItems.size();
        }

    }

    public interface ISPDataModelClickListener {
        void editAction(int indexInRealm, ISPDataModel model, ISPDataModelAdapter adapter);

        void deleteAction(int indexInRealm, ISPDataModel model, ISPDataModelAdapter adapter);

        void selectAction(int indexInRealm, ISPDataModel model, ISPDataModelAdapter adapter);
    }

    public interface ISPModelSelectListener {
        void onSelect(int indexInRealm, ISPDataModel model, ISPDataModelAdapter adapter);
    }

    private interface ISPDataEditListener {
        void onComplete();
    }
}