package app.exploitr.login.platinum.ui.activities;

import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;

import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.firebase.auth.FirebaseAuth;

import app.exploitr.login.platinum.R;
import app.exploitr.login.platinum.database.UserProfileDB;
import app.exploitr.login.platinum.databinding.ActivityMainScreenBinding;
import app.exploitr.login.platinum.network.AuthProvider;
import app.exploitr.login.platinum.network.Sync;


public class MainScreen extends AppCompatActivity {

    private ActivityResultLauncher<Intent> launchSignIn;
    private ActivityMainScreenBinding binding;
    private MenuItem signInMenuItem;
    private MenuItem syncItem;

    private UserProfileDB profile;

    private boolean loadUsername = false;
    private boolean loadJoiningDate = false;
    private boolean loadOtherData = false;
    private int PROGRESS_LOADING_VALUE = 10;

    private boolean signedIn = false;

    private AlertDialog alertDialog;
    private LinearProgressIndicator progressBar;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityMainScreenBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        BottomNavigationView navView = findViewById(R.id.nav_view);
        // Passing each menu ID as a set of Ids because each
        // menu should be considered as top level destinations.
        AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder(
                R.id.navigation_dashboard, R.id.navigation_stat, R.id.navigation_notifications)
                .build();
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_activity_main_screen);
        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);
        NavigationUI.setupWithNavController(binding.navView, navController);

        profile = new UserProfileDB(this);
        startSignInAction();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_main_drawer, menu);
        signInMenuItem = menu.findItem(R.id.nav_sign_in);
        if (false /*todo : actual cond*/) {
            signInMenuItem.setIcon(R.drawable.ic_log_out);
            signedIn = false;
        } else
            signedIn = true;
        syncItem = menu.findItem(R.id.nav_sync);
        if (new UserProfileDB(this).isDataUpdated()) {
            syncItem.setVisible(true);
        }
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == R.id.nav_sign_in) {
            signInMenuItem = item;
            if (signedIn) {
                startSignInAction();
            } else {
                startSignOutAction(); //todo disable reverse toggle
            }
        }
        if (item.getItemId() == R.id.nav_sync) {

            //todo : sync
        }
        return super.onOptionsItemSelected(item);
    }

    private void startSignInAction() {
        if (FirebaseAuth.getInstance().getCurrentUser() != null) {
            new AuthProvider().signIn(this, new AuthProvider.AuthListener() {
                @Override
                public void onAuthSuccess() {
                    signInMenuItem.setIcon(R.drawable.ic_log_out);
                    syncItem.setVisible(true);
                    Toast.makeText(MainScreen.this, "Syncing... Please wait!", Toast.LENGTH_SHORT).show();
                    loadUserProfileAndData();
                }

                @Override
                public void onAuthFailure() {
                    Toast.makeText(MainScreen.this, "Google Login Failed! Retry later.", Toast.LENGTH_SHORT).show();
                    syncItem.setVisible(false);
                }
            });
        }
    }

    private void startSignOutAction() {
        // todo : show prompt to clear realm data too!
        if (FirebaseAuth.getInstance().getCurrentUser() != null) {
            new AuthProvider().signOut();
        }
    }

    private void loadUserProfileAndData() {
        notifyLoading();
        Sync.sync(this, new Sync.SyncListener() {
            @Override
            public void onSyncComplete() {
                stopLoadingAlert();
            }

            @Override
            public void onProgress(int progress) {
                progressBar.setProgress(progress);
            }

            @Override
            public void onSyncFail(@Nullable Exception e) {
                stopLoadingAlert();
                Toast.makeText(MainScreen.this, "Sync Failed! Retry later.", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void notifyLoading() {
        var load = getLayoutInflater().inflate(R.layout.data_loading, null);
        progressBar = (LinearProgressIndicator) load.findViewById(R.id.progressBar_load);
        alertDialog = new AlertDialog.Builder(this)
                .setView(load)
                .setCancelable(false)
                .create();
        if (!this.isFinishing())
            alertDialog.show();
    }

    private void stopLoadingAlert() {
        if (alertDialog.isShowing())
            alertDialog.dismiss();
    }
}