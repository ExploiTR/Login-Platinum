package app.exploitr.fast.login.connectors;


import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.view.View;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.concurrent.TimeoutException;

import app.exploitr.fast.login.R;
import app.exploitr.login.platinum.helpers.Constants;
import app.exploitr.fast.login.utils.DataMan;


public class StatusChecker extends AsyncTask<Void, Integer, Integer> implements Constants {
 
    private final WeakReference<TextView> ipTextClone;
    private WeakReference<ProgressBar> progressBar;
    private WeakReference<ImageView> imageView;
    private WeakReference<View> crossView;
 
    public StatusChecker(ProgressBar progressBar, ImageView imageMView, View gotView, TextView ipText) {
        this.progressBar = new WeakReference<>(progressBar);
        this.imageView = new WeakReference<>(imageMView);
        this.crossView = new WeakReference<>(gotView);
        this.ipTextClone = new WeakReference<>(ipText);
    }
 
    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        progressBar.get().setVisibility(View.VISIBLE);
        ipTextClone.get().setVisibility(View.INVISIBLE);
    }
 
    @Override
    protected Integer doInBackground(Void... params) {
        try {
            return UpdatedStatus.executePing(DataMan.getInstance(crossView.get().getContext()).getPingAddress(),
                    DataMan.getInstance(crossView.get().getContext()).getPingAttemptsCount());
        } catch (IOException | InterruptedException | TimeoutException e) {
            e.printStackTrace();
            return 20;
        }
    }

    @Override
    protected void onPostExecute(Integer integer) {
        if (integer < 1) {
            imageView.get().setImageResource(R.drawable.isconnected);
            Toast.makeText(crossView.get().getContext(), CONNECTION_OK, Toast.LENGTH_SHORT).show();
            LocalBroadcastManager.getInstance(crossView.get().getContext().getApplicationContext())
                    .sendBroadcast(new Intent(LOGIN_SUCCESS));
            loadIPAddressAndDisableProgressBar(crossView.get().getContext(), ipTextClone.get(), progressBar.get());
        } else {
            progressBar.get().setVisibility(View.INVISIBLE);
            imageView.get().setImageResource(R.drawable.isconnectedx);
            LocalBroadcastManager.getInstance(crossView.get().getContext().getApplicationContext())
                    .sendBroadcast(new Intent(LOGIN_FAILURE));
            Toast.makeText(crossView.get().getContext(), CONNECTION_ERR_WARNING, Toast.LENGTH_SHORT).show();
        }
        super.onPostExecute(integer);
    }
 
    private void loadIPAddressAndDisableProgressBar(Context context, final TextView boomText, final ProgressBar progressBar) {
        //Ion loads caches NOT ASYNCHRONOUSLY
        AsyncTask.execute(() -> {
            /*
            Ion.with(context).load(IP_ADDRESS_DISPLAY_URL)
                    .asString()
                    .withResponse()
                    .setCallback((e, result) -> new Handler(Looper.getMainLooper()).post(() -> {
                        progressBar.setVisibility(View.INVISIBLE);
                        if (result != null) {
                            String boomTexts = IP_ADDRESS_DISPLAY_TEXT + result.getResult();
                            boomText.setText(boomTexts);
                        } else {
                            boomText.setText(Utils.boaTheSnake);
                        }
                        boomText.setVisibility(View.VISIBLE);
                    }))*/
        });
    }
}