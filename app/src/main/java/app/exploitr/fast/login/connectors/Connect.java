package app.exploitr.fast.login.connectors;


import android.content.Intent;
import android.os.AsyncTask;
import android.view.View;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.evernote.android.job.JobManager;

import java.io.IOException;
import java.lang.ref.WeakReference;

import app.exploitr.fast.login.background_workers.AlwaysOnService;
import app.exploitr.fast.login.background_workers.AutoJob;
import app.exploitr.login.platinum.helpers.Constants;
import app.exploitr.fast.login.utils.DataMan;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

//todo
public class Connect extends AsyncTask<String, Integer, Integer> {

    private final WeakReference<ProgressBar> progressbar;
    private final WeakReference<ImageView> imageView;
    private final WeakReference<View> viewReference;
    private final WeakReference<TextView> ipTextClone;

    public Connect(ProgressBar progressBar, ImageView imageMView, View view, TextView ipText) {
        this.progressbar = new WeakReference<>(progressBar);
        this.imageView = new WeakReference<>(imageMView);
        this.viewReference = new WeakReference<>(view);
        this.ipTextClone = new WeakReference<>(ipText);
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        progressbar.get().setVisibility(View.VISIBLE);
        ipTextClone.get().setVisibility(View.INVISIBLE);
    }

    @Override
    protected Integer doInBackground(String... params) {
        String user = params[0];
        String pass = params[1];

        OkHttpClient client = new OkHttpClient.Builder().build();
        RequestBody formBody = new FormBody.Builder()
                .add(Constants.POST_USERNAME_FIELD, user)
                .add(Constants.POST_PASSWORD_FIELD, pass)
                .build();

        Request.Builder builder = new Request.Builder()
                .url(Constants.URL_TO_LOGIN)
                .post(formBody);
        Request request = builder.build();
        Response response = null;
        try {
            response = client.newCall(request).execute();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (response != null) {
            if (response.body() != null) {
                response.body().close();
            }
        }
        if (response != null) {
            return response.code();
        } else
            return 2300;
    }

    @Override
    protected void onPostExecute(Integer integer) {
        super.onPostExecute(integer);
        if (integer == 200) {
            if(imageView.get()!=null && viewReference.get()!=null){
                if (DataMan.getInstance(imageView.get().getContext()).getPeriodic()
                        && JobManager.instance().getAllJobRequestsForTag(AutoJob.TAG).isEmpty()) {
                    AutoJob.schedulePeriodic();
                }
                if (DataMan.getInstance(imageView.get().getContext()).getPureAutoLogin()) {
                    if (AlwaysOnService.isNotMyServiceRunning(AlwaysOnService.class, imageView.get().getContext())
                            && (DataMan.getInstance(viewReference.get().getContext()).getUser() != null
                            || DataMan.getInstance(viewReference.get().getContext()).getPassword() != null)) {
                        imageView.get().getContext().startService(new Intent(imageView.get().getContext(), AlwaysOnService.class));
                    }
                }
            }
        }

        /* some extra checks */
        new StatusChecker(progressbar.get(), imageView.get(), viewReference.get(), ipTextClone.get()).execute();

    }

}

