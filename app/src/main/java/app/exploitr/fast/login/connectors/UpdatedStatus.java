package app.exploitr.fast.login.connectors;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import app.exploitr.login.platinum.helpers.Constants;
import app.exploitr.fast.login.utils.Utils;


public class UpdatedStatus implements Constants {

    public static int executePing(String addr, String attempts) throws IOException, InterruptedException, TimeoutException {
        Runtime runtime = Runtime.getRuntime();
        Process process = runtime.exec("ping -c " + attempts + " " + addr);
        Worker worker = new Worker(process);
        worker.start();
        try {
            worker.join((long) (Integer.parseInt(attempts) + Integer.parseInt(attempts)) * 250);
            if (worker.exit != null)
                return worker.exit;
            else
                throw new TimeoutException();
        } catch (InterruptedException ex) {
            worker.interrupt();
            Thread.currentThread().interrupt();
            throw ex;
        } finally {
            process.destroy();
        }
    }

    public static String returnPingMsOut() throws IOException, InterruptedException {
        Process process = Runtime.getRuntime().exec(PING_GRAPH_PING_COMMAND);
        SignalWorker worker = new SignalWorker(process);
        worker.start();
        try {
            worker.join(125);
            if (worker.msValue != null)
                return worker.msValue;
            else
                return PING_TIMEOUT_GRAPH_FLOAT;
        } catch (InterruptedException ex) {
            worker.interrupt();
            Thread.currentThread().interrupt();
            throw ex;
        } finally {
            process.destroy();
        }
    }

    private static class Worker extends Thread {
        private final Process process;
        private Integer exit;

        private Worker(Process process) {
            this.process = process;
        }

        public void run() {
            try {
                process.waitFor();
                exit = process.exitValue();
            } catch (InterruptedException ignored) {
            }
        }
    }

    private static class SignalWorker extends Thread {
        private final Process process;
        private String msValue;

        private SignalWorker(Process process) {
            this.process = process;
        }

        public void run() {
            try {
                msValue = Utils.returnPingOut(process);
            } catch (Exception e) {
                e.printStackTrace();
                msValue = PING_TIMEOUT_GRAPH_FLOAT;
            }
        }
    }
}
