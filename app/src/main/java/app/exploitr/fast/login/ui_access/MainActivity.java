package app.exploitr.fast.login.ui_access;


import static app.exploitr.fast.login.utils.Utils.replaceFirstNumAndFormat;

import android.annotation.SuppressLint;
import android.app.ActivityOptions;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.provider.Settings;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.graphics.drawable.DrawableCompat;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import com.evernote.android.job.JobManager;
import com.getkeepsafe.taptargetview.TapTarget;
import com.getkeepsafe.taptargetview.TapTargetSequence;
import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.drive.Drive;
import com.google.android.gms.drive.DriveContents;
import com.google.android.gms.drive.DriveFile;
import com.google.android.gms.drive.DriveFolder;
import com.google.android.gms.drive.DriveResourceClient;
import com.google.android.gms.drive.MetadataBuffer;
import com.google.android.gms.drive.MetadataChangeSet;
import com.google.android.gms.drive.query.Filters;
import com.google.android.gms.drive.query.Query;
import com.google.android.gms.drive.query.SearchableField;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.vending.licensing.AESObfuscator;
import com.google.android.vending.licensing.LicenseCheckerCallback;
import com.google.android.vending.licensing.Policy;
import com.google.android.vending.licensing.ServerManagedPolicy;
import com.txusballesteros.SnakeView;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionButton;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionHelper;
import com.wangjie.rapidfloatingactionbutton.RapidFloatingActionLayout;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RFACLabelItem;
import com.wangjie.rapidfloatingactionbutton.contentimpl.labellist.RapidFloatingActionContentLabelList;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeoutException;

import app.exploitr.fast.login.BuildConfig;
import app.exploitr.fast.login.R;
import app.exploitr.fast.login.background_workers.AlwaysOnService;
import app.exploitr.fast.login.background_workers.AutoJob;
import app.exploitr.fast.login.connectors.Connect;
import app.exploitr.fast.login.connectors.Disconnect;
import app.exploitr.fast.login.connectors.StatusChecker;
import app.exploitr.fast.login.connectors.UpdatedStatus;
import app.exploitr.login.platinum.helpers.Constants;
import app.exploitr.fast.login.utils.DataMan;
import app.exploitr.fast.login.utils.Logger;
import app.exploitr.fast.login.utils.Utils;
import de.cketti.mailto.EmailIntentBuilder;

public class MainActivity extends AppCompatActivity implements
		NavigationView.OnNavigationItemSelectedListener,
		RapidFloatingActionContentLabelList.OnRapidFloatingActionContentLabelListListener,
		Constants,
		DrawerLayout.DrawerListener {

	public static final boolean buildFinal = true;
	private final static String DEV_MAIL = "pratimdevonplay@gmail.com";
	private static final int REQUEST_CODE_SIGN_IN = 0;
	/*fix according to https://stackoverflow.com/a/25535931/8572503*/
	private static final int CHOOSE_SETTINGS = 1, CHOOSE_THEME = 2, CHOOSE_ABOUT = 3, CHOOSE_SHARE = 4;
	private static final String BASE64_PUBLIC_KEY = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwPbLaMnKNWXKBSmv+uLUM3BVuvpIrTUtV9D2/Si2gdb1/Cdi/1TOeyDmo4GP1apXyQ/v7xiSHN0dtq17A5UWktDAQbFNV6eY0TfXPWYTDY/cGQsfOnIe13GMMiYyG4VRTAIGbSszhzEZ5k+2UaRCiO3gjULSw+GgXxpTDjV0pIS7+gQeRr6dq5nqQZT7WcMgXDKaqlimcki7v0Lry9bb3vIdD8tARuz/gqwYsqp+MG7xjdKkmzVxvY1WZ8nIamuI+8kmyPtyEp39Sy+sA1cN1H2dpGeTLc+oJNNkjBS67B0Jmh7ShlT4Mhz5u+7v9WUso49x+fJ0BYYRFIA1YvaNMQIDAQAB";
	public static boolean LOGIN_STATE = false;
	public static boolean closeApp = false;
	public static int specialRequestCode;
	public static boolean tryLogin = false;
	public static boolean isActive = true;
	/*fix according to https://stackoverflow.com/a/25535931/8572503*/
	private static int chosen = 2991;
	private RapidFloatingActionHelper rfabHelper;
	private RapidFloatingActionContentLabelList rfaContent;
	private Toolbar toolbar;
	private TextView statText, ipText, pingVal, pingAvgVal;
	private WifiManager wifiManager;
	private DrawerLayout drawer;
	private ProgressBar loadingProgress;
	private ImageView statusImage;
	private BroadcastReceiver postMan;
	private BroadcastReceiver signalMan;
	private SnakeView snakeView;
	private Handler handler;
	private Handler h;
	private DriveResourceClient mDriveResourceClient;
	private TapTargetSequence sequence;
	private RapidFloatingActionButton rfaBtn;
	private LicenseCheckerCallback mLicenseCheckerCallback;
	private com.google.android.vending.licensing.LicenseChecker mChecker;
	private AlertDialog alertDialog, alertDialog2;


	/*The Starting point*/
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_main);

		toolbar = findViewById(R.id.toolbar);
		setSupportActionBar(toolbar);
		toolbar.inflateMenu(R.menu.mux_menu);

		loadingProgress = findViewById(R.id.loadingAction);
		loadingProgress = findViewById(R.id.loadingAction);
		statusImage = findViewById(R.id.stat);
		statText = findViewById(R.id.statsText);
		ipText = findViewById(R.id.ipView);
		pingVal = findViewById(R.id.pingVal);
		pingAvgVal = findViewById(R.id.ping_avg_Val);

		snakeView = findViewById(R.id.snake);

		LinearLayout graph_view = findViewById(R.id.graph_view);

		RapidFloatingActionLayout rfaLayout = findViewById(R.id.activity_main_rfal);
		rfaBtn = findViewById(R.id.activity_main_rfab);

		rfaContent = new RapidFloatingActionContentLabelList(MainActivity.this);
		rfaContent.setOnRapidFloatingActionContentLabelListListener(this);

		int color = (int) Long.parseLong(Integer.toHexString(DataMan.getInstance(getBaseContext()).getThemeColor()), 16);
		int r = (color >> 16) & 0xFF;
		int g = (color >> 8) & 0xFF;
		int b = (color) & 0xFF;

		rfaBtn.setNormalColor(Color.argb(255, r, g, b));
		rfaBtn.setPressedColor(Color.argb(200, r, g, b));

		rfaBtn.build();

		List<RFACLabelItem> items = new ArrayList<>();
		items.add(new RFACLabelItem<Integer>()
				.setLabel("Toggle WiFi State")
				.setIconNormalColor(Color.argb(255, r, g, b))
				.setIconPressedColor(Color.argb(200, r, g, b))
				.setWrapper(0));
		items.add(new RFACLabelItem<Integer>()
				.setLabel("Toggle Login State")
				.setIconNormalColor(Color.argb(255, r, g, b))
				.setIconPressedColor(Color.argb(200, r, g, b))
				.setWrapper(1));

		items.add(new RFACLabelItem<Integer>()
				.setLabel("Manual Enable Watchdog")
				.setResId(R.drawable.ic_watch)
				.setIconNormalColor(Color.argb(255, r, g, b))
				.setIconPressedColor(Color.argb(200, r, g, b))
				.setWrapper(2));

		rfaContent.setItems(items)
				.setIconShadowRadius(5)
				.setIconShadowColor(0xff888888)
				.setIconShadowDy(5);

		rfabHelper = new RapidFloatingActionHelper(MainActivity.this, rfaLayout, rfaBtn, rfaContent).build();

		postMan = new PostMan(new Handler(), rfaContent.getItems().get(0), rfabHelper);
		signalMan = new SignalMan(new Handler(), graph_view, findViewById(R.id.pingControl), rfaContent.getItems().get(1),
				rfabHelper);

		wifiManager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);

		doAQuickUISetup();

		snakeView.setMinValue(0);
		snakeView.setMaxValue(125);

		//I'm forced to ask this at first
		if ((!DataMan.getInstance(getBaseContext()).isNew())
				&& (DataMan.getInstance(getBaseContext()).getUser().equals("") ||
				DataMan.getInstance(getBaseContext()).getPassword().equals(""))) {
			startActivity(new Intent(MainActivity.this, SettingsActivity.class)
					.putExtra(REQUEST_U_P, REQUEST_U_P));
		}

		//<editor-fold> desc=" Tap target View Here"
		if (DataMan.getInstance(getBaseContext()).isNew()) {
			findViewById(R.id.pingControl).setVisibility(View.VISIBLE);
			ipText.setVisibility(View.VISIBLE);
			sequence = new TapTargetSequence(MainActivity.this)
					.targets(
							TapTarget.forView(statusImage,
									"See Here",
									"This one tells if you're connected by switching between green and red!")
									.transparentTarget(true)
									.outerCircleColor(R.color.RED_X)
									.cancelable(false),
							TapTarget.forView(ipText,
									"Your IP Address",
									"Your visible ip address outside the local network/NAT ")
									.transparentTarget(true)
									.outerCircleColor(R.color.RED_X)
									.cancelable(false),
							TapTarget.forView(pingVal,
									"Current Ping",
									"See how your internet connection is performing in realtime ! (Not to be mixed up with bandwidth) [Disabled By Default]")
									.transparentTarget(true)
									.outerCircleColor(R.color.RED_X)
									.cancelable(false),
							TapTarget.forView(pingAvgVal,
									"Average Ping",
									"See how your internet connection is actually performing! [Disabled By Default]")
									.transparentTarget(true)
									.outerCircleColor(R.color.RED_X)
									.cancelable(false).id(1290),
							TapTarget.forView(rfaBtn,
									"Action Part!",
									"Login State and WiFi toggle (You won't need this once autoL is active)")
									.transparentTarget(true)
									.outerCircleColor(R.color.RED_X)
									.cancelable(false),
							TapTarget.forToolbarMenuItem(
									toolbar,
									R.id.open_web,
									"The web help!",
									"You'll be able to diagnose problems like: \n\n" +
											"• You forgot to recharge\n" +
											"• RADIUS server not responding\n" +
											"• Broken connection to local server\n" +
											"• And most of other technical problems"
							)
									.transparentTarget(true)
									.cancelable(false)
									.outerCircleColor(R.color.RED_X)
									.id(1291)
					).listener(new TapTargetSequence.Listener() {
						@Override
						public void onSequenceFinish() {
							DataMan.getInstance(MainActivity.this).setOLD();

							//ask usr for u p
							new AlertDialog.Builder(MainActivity.this)
									.setTitle("Notice")
									.setMessage("Enough intro. Now save username and password?")
									.setPositiveButton("Ok", (dialog, which) -> setOld())
									.show();
						}

						@Override
						public void onSequenceStep(TapTarget lastTarget, boolean targetClicked) {
							if (lastTarget.id() == 1290) {
								rfaBtn.performClick();
							} else if (lastTarget.id() == 1291) {
								drawer.openDrawer(GravityCompat.START);
								Toast.makeText(MainActivity.this, "Find your way here!", Toast.LENGTH_SHORT).show();
							}
						}

						@Override
						public void onSequenceCanceled(TapTarget lastTarget) {

						}
					});
		}
		//</editor-fold>

		if (DataMan.getInstance(getBaseContext()).isNew()) {
			if (Utils.userName(getBaseContext()) == null) {
				alertDialog = new AlertDialog.Builder(MainActivity.this)
						.setTitle("Kind Request")
						.setMessage("• Please use the red bug reporting button at right-top in case of any problem \n" +
								"• Please exit normally from the app using back button.\n" +
								"• Do fresh installs (uninstall then install) across each updates as I've implemented auto credential restore.\n" +
								"• There are still bugs, help me spray the repellent.")
						.setPositiveButton("Okay.", (e, v) -> {
							e.dismiss();
							if (!MainActivity.this.isFinishing()) {
								alertDialog2 = new AlertDialog.Builder(MainActivity.this)
										.setTitle("Hi Mate!")
										.setMessage("Do you have previously uploaded credentials ?")
										.setPositiveButton("Yes", (dialog, which) -> {
											DataMan.getInstance(getBaseContext()).setOLD();
											dialog.dismiss();
											new AlertDialog.Builder(MainActivity.this)
													.setTitle("Notice")
													.setMessage("Download Previously Saved Credentials?")
													.setPositiveButton("Ok", (dialog13, which13) -> {
														Toast.makeText(MainActivity.this, "Trying to restore..",
																Toast.LENGTH_SHORT).show();
														specialRequestCode = readSpecialRequestCode;
														tryLogin = true;

														Snackbar bar = Snackbar.make(
																rfaBtn,
																"Please wait while I try to restore",
																Snackbar.LENGTH_INDEFINITE);
														bar.setAction("Ok", e1 -> bar.dismiss());
														bar.show();
													}).setNegativeButton("I didn't store", (dialog12, which12) -> setOld()).show();
										})
										.setNegativeButton("No", (dialog, which) -> {
											dialog.dismiss();
											new AlertDialog.Builder(MainActivity.this)
													.setTitle("Hi Mate!")
													.setCancelable(false)
													.setMessage("Let's have a tour.")
													.setPositiveButton("Okay", (a, c) -> {
														if (sequence != null) {
															sequence.start();
														}
														a.dismiss();
													}).setNegativeButton("No", (dialog1, which1) -> setOld()).show();
										}).create();
								if (!alertDialog2.isShowing() && !isFinishing())
									alertDialog2.show();
							}
						}).create();
				if (!alertDialog.isShowing() && !isFinishing()) {
					alertDialog.show();
				}
			}
		}

		/* End OnCreate*/

		new Handler().postDelayed(() -> {
			setUpBackOffWork();
			checkRAM();
			if (!DataMan.getInstance(getBaseContext()).isLicenseVerified()) {
				checkLicense();
			}

		}, 4000);

		handler = new Handler();
		Runnable runnable = new Runnable() {
			@Override
			public void run() {
				if (DataMan.getInstance(getBaseContext()).isGraphEnabled() && LOGIN_STATE) {
					AverageGrapher.init(new WeakReference<>(pingAvgVal)).putValue(0).draw();
					new Grapher(pingVal, snakeView).execute();
					findViewById(R.id.pingControl).setVisibility(View.VISIBLE);
					findViewById(R.id.graph_view).setVisibility(View.VISIBLE);
				} else if (AverageGrapher.inited_Already() != null) {
					AverageGrapher.inited_Already().destroy();
				} else {
					findViewById(R.id.pingControl).setVisibility(View.GONE);
					findViewById(R.id.graph_view).setVisibility(View.GONE);
				}
				if (!closeApp) {
					handler.postDelayed(this, 250); // set time here to check update
				} else {
					handler.removeCallbacks(this);
				}
			}
		};

		handler.post(runnable);
	}

	private void setOld() {
		DataMan.getInstance(MainActivity.this).setOLD();
		if (DataMan.getInstance(getBaseContext()).getUser() == null
				|| DataMan.getInstance(getBaseContext()).getPassword() == null) {
			startActivity(
					new Intent(MainActivity.this, SettingsActivity.class)
							.putExtra(REQUEST_U_P, REQUEST_U_P));
		}
	}

	private void checkLicense() {
		// Try to use more data here. ANDROID_ID is a single point of attack.
		@SuppressLint("HardwareIds")
		String deviceID =
				Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID) +
						Build.FINGERPRINT;

		mLicenseCheckerCallback = new LicenseChecker();
		// Construct the LicenseChecker with a policy.
		mChecker = new com.google.android.vending.licensing.LicenseChecker(this,
				new ServerManagedPolicy(this, new AESObfuscator(deviceID.getBytes(), getPackageName(), deviceID)),
				BASE64_PUBLIC_KEY);

		doCheck();
	}

	@Override
	protected void onDestroy() {
		closeApp = false;
		try {
			AverageGrapher.inited_Already().destroy();
		} catch (Exception e) {
			e.printStackTrace();
			if (buildFinal) {
				//log exception
			}
		}
		super.onDestroy();
	}

	@Override
	protected void onResume() {
		isActive = true;
		IntentFilter intentFilter = new IntentFilter();
		intentFilter.addAction(LOGIN_FAILURE);
		intentFilter.addAction(LOGIN_SUCCESS);
		LocalBroadcastManager.getInstance(getApplicationContext()).registerReceiver(signalMan, intentFilter);
		registerReceiver(postMan, new IntentFilter("android.net.wifi.STATE_CHANGE"));

		if (snakeView != null) {
			snakeView.setFillColor(DataMan.getInstance(getBaseContext()).getProgressThemeColor());
		} else {
			// don't know why only this goes null.Anyway, here's a quick fix
			snakeView = findViewById(R.id.snake);
		}

		rfaContent.getItems().get(1).setResId(R.drawable.ic_connect); // just to save ui lag, done automatically after status checked
		if (wifiManager.isWifiEnabled()) {
			rfaContent.getItems().get(0).setResId(R.drawable.wifi_down);

			if (!Utils.isNetworkAvailable(getApplicationContext())) {
				new AlertDialog.Builder(this)
						.setTitle(R.string.cant_detect_conn)
						.setMessage(R.string.wifi_up_nt_connected)
						.setCancelable(true)
						.show();
			} else {
				if (!Utils.userName(getBaseContext()).equals("") && DataMan.getInstance(getBaseContext()).isAutoL()) {
					new Connect(loadingProgress, statusImage, findViewById(R.id.main), ipText)
							.execute(Utils.userName(getBaseContext()), Utils.passWord(getBaseContext()));
				} else {
					new StatusChecker(loadingProgress, statusImage, findViewById(R.id.main), ipText).execute();
				}
			}

		} else {
			new AlertDialog.Builder(this)
					.setTitle(R.string.cant_detect_conn)
					.setMessage(R.string.turn_up_wifi)
					.setCancelable(true)
					.show();
			rfaContent.getItems().get(0).setResId(R.drawable.wifi_up);
		}
		rfabHelper.build();

		h = new Handler();
		Runnable r = new Runnable() {
			@Override
			public void run() {
				if (closeApp) {
					finish();
				}
				if (!MainActivity.this.isFinishing()) {
					if (tryLogin) {
						if (specialRequestCode != writeSpecialRequestCode) {
							specialRequestCode = readSpecialRequestCode;
						}
						signIn();
						tryLogin = false;
					}
					h.postDelayed(this, 100);
				} else {
					h.removeCallbacks(this);
				}
			}
		};
		h.post(r);
		super.onResume();
	}

	@Override
	protected void onPause() {
		if (alertDialog != null && alertDialog.isShowing()) {
			alertDialog.dismiss();
		}
		if (alertDialog2 != null && alertDialog2.isShowing()) {
			alertDialog2.dismiss();
		}
		isActive = false;
		super.onPause();
	}

	@Override
	public void onBackPressed() {
		new AlertDialog.Builder(MainActivity.this)
				.setMessage("Exit Login ?")
				.setCancelable(true)
				.setPositiveButton(android.R.string.yes, (dialog, id) -> {
					if (drawer.isDrawerOpen(GravityCompat.START)) {
						drawer.closeDrawer(GravityCompat.START);
					}
					closeApp = true;
				}).show();
	}

	@Override
	protected void onStop() {
		super.onStop();
		try {
			unregisterReceiver(postMan);
			LocalBroadcastManager.getInstance(getApplicationContext()).unregisterReceiver(signalMan);
		} catch (Exception e) {
			e.printStackTrace();
			if (buildFinal) {
				//log exception
			}
		}
		snakeView = null;
	}

	@Override
	public boolean onNavigationItemSelected(@NonNull MenuItem item) {
		int id = item.getItemId();
		if (id == R.id.nav_settings) {
			chosen = CHOOSE_SETTINGS;
		} else if (id == R.id.nav_theme) {
			chosen = CHOOSE_THEME;
		} else if (id == R.id.nav_about) {
			chosen = CHOOSE_ABOUT;
		} else if (id == R.id.nav_share) {
			chosen = CHOOSE_SHARE;
		}
		DrawerLayout drawer = findViewById(R.id.drawer_layout);
		drawer.closeDrawer(GravityCompat.START);
		return true;
	}

	/*
	 * Moved all onCreate() contents to this method.
	 * Uses universal variables declared in parent class.
	 * */
	private void doAQuickUISetup() {
		toolbar.setBackgroundColor(DataMan.getInstance(getBaseContext()).getThemeColor());
		toolbar.setTitleTextColor(DataMan.getInstance(getBaseContext()).getTitleThemeColor());
		statText.setTextColor(DataMan.getInstance(getBaseContext()).getStatusThemeColor());

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
			getWindow().setStatusBarColor(DataMan.getInstance(getBaseContext()).getThemeColor());
		}

		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
			Drawable drawableProgress = DrawableCompat.wrap(loadingProgress.getIndeterminateDrawable());
			DrawableCompat.setTint(drawableProgress, DataMan.getInstance(getBaseContext()).getProgressThemeColor());
			loadingProgress.setIndeterminateDrawable(DrawableCompat.unwrap(drawableProgress));
		} else {
			loadingProgress.getIndeterminateDrawable().setColorFilter(DataMan.getInstance(getBaseContext()).getProgressThemeColor(), PorterDuff.Mode.SRC_IN);
		}

		drawer = findViewById(R.id.drawer_layout);
		drawer.addDrawerListener(this);
		ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar,
				R.string.navigation_drawer_open, R.string.navigation_drawer_close);
		drawer.addDrawerListener(toggle);
		toggle.syncState();
		NavigationView navigationView = findViewById(R.id.nav_view);
		navigationView.setNavigationItemSelectedListener(this);
	}

	@Override
	public void onRFACItemLabelClick(int position, RFACLabelItem item) {
		if (position == 0) {
			new AlertDialog.Builder(MainActivity.this)
					.setTitle("Help")
					.setMessage("Inverts WiFi Enabled State").show();
		} else if (position == 1) {
			new AlertDialog.Builder(MainActivity.this)
					.setTitle("Help")
					.setMessage("Inverts Login State").show();
		} else if (position == 2) {
			new AlertDialog.Builder(MainActivity.this)
					.setTitle("Help")
					.setMessage("Manual Watchdog Enabling").show();
		}
	}

	@Override
	public void onRFACItemIconClick(int position, RFACLabelItem item) {
		if (position == 0) {
			wifiManager.setWifiEnabled(!wifiManager.isWifiEnabled());
		} else if (position == 1) {
			if (LOGIN_STATE) {
				DataMan.getInstance(getBaseContext()).setLogoutState(true);
				new Disconnect(loadingProgress, statusImage, findViewById(R.id.pingControl), ipText).execute();
			} else {
				DataMan.getInstance(getBaseContext()).setLogoutState(false);
				if (!DataMan.getInstance(getBaseContext()).getUser().equals("")) {
					new Connect(loadingProgress, statusImage, findViewById(R.id.pingControl), ipText).execute(Utils.userName(getBaseContext()), Utils.passWord(getBaseContext()));
				} else {
					startActivity(new Intent(MainActivity.this, SettingsActivity.class));
				}
			}
		} else if (position == 2) {
			setUpBackOffWork();
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.mux_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		if (item.getOrder() == 0) {
			new AlertDialog.Builder(MainActivity.this)
					.setTitle("You're going to move to the web version!")
					.setMessage("You'll be able to diagnose problems like: \n\n" +
							"• You forgot to recharge\n" +
							"• RADIUS server not responding\n" +
							"• Broken connection to local server\n" +
							"• And most of other technical problems")
					.setPositiveButton("Go", (dialog, which) -> startActivity(new Intent(Intent.ACTION_VIEW).setData(Uri.parse("http://2.2.2.2/login"))))
					.setNegativeButton("No!", null).show();
		} else if (item.getOrder() == 1) {
			@SuppressLint("InflateParams")
			View bugger = getLayoutInflater().inflate(R.layout.bug_report, null);
			new AlertDialog.Builder(MainActivity.this)
					.setView(bugger)
					.setCancelable(false)
					.setNegativeButton("Cancel", (e, f) -> e.dismiss())
					.setPositiveButton("Send", (g, h) -> {
						g.dismiss();
						startActivity(Intent.createChooser(
								EmailIntentBuilder.from(MainActivity.this)
										.subject("BUG_REPORT :" + getPackageName())
										.to(DEV_MAIL)
										.body(
												bug_report_body + ((EditText) bugger
														.findViewById(R.id.bug_report))
														.getText()
														.toString()
										)
										.build()
								, "Choose Email Client"
						));
					})
					.show();
		}
		return super.onOptionsItemSelected(item);
	}

	private DriveResourceClient getDriveResourceClient() {
		return mDriveResourceClient;
	}

	private void checkRAM() {
		if (!Utils.bigRAM(MainActivity.this) && DataMan.getInstance(getBaseContext()).isNew()) {
			DataMan.getInstance(MainActivity.this).setGraphEnabled(false);
			if (!MainActivity.this.isFinishing()) {
				new AlertDialog.Builder(MainActivity.this)
						.setTitle("Alert!")
						.setMessage("The `Ping Graph` feature " +
								"eats quite good amount of memory " +
								"and needs CPU Power. " +
								"If you're experiencing some problems " +
								"you can disable it from settings.")
						.show();
			}
		} else {
			DataMan.getInstance(MainActivity.this).setGraphEnabled(true);
		}
	}

	private void setUpBackOffWork() {
		if (DataMan.getInstance(getBaseContext()).getPeriodic()
				&& JobManager.instance().getAllJobRequestsForTag(AutoJob.TAG).isEmpty()) {
			AutoJob.schedulePeriodic();
		}
		if (DataMan.getInstance(getBaseContext()).getPureAutoLogin() &&
				(DataMan.getInstance(getBaseContext()).getUser() != null
						|| DataMan.getInstance(getBaseContext()).getPassword() != null)) {
			if (AlwaysOnService.isNotMyServiceRunning(AlwaysOnService.class, this)) {
				startService(new Intent(this, AlwaysOnService.class));
			}
		}
	}

	/**
	 * Starts the sign-in process and initializes the Drive client.
	 */
	public void signIn() {
		GoogleSignInOptions signInOptions = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
				.requestScopes(Drive.SCOPE_FILE)
				.requestScopes(Drive.SCOPE_APPFOLDER)
				.build();
		GoogleSignInClient googleSignInClient = GoogleSignIn.getClient(this, signInOptions);
		startActivityForResult(googleSignInClient.getSignInIntent(), REQUEST_CODE_SIGN_IN);
	}

	/**
	 * Continues the sign-in process, initializing the DriveResourceClient with the current
	 * user's account.
	 */
	private void initializeDriveClient(GoogleSignInAccount signInAccount) {
		mDriveResourceClient = Drive.getDriveResourceClient(getApplicationContext(), signInAccount);
		mDriveResourceClient.getAppFolder()
				.addOnSuccessListener(driveFolder ->
						new Handler(Looper.getMainLooper())
								.postDelayed(() ->
										listAndDoOperation(driveFolder, specialRequestCode), 1000))
				.addOnFailureListener(e -> Toast.makeText(MainActivity.this
						, "Failed to connect Google Drive", Toast.LENGTH_SHORT).show());
	}

	/**
	 * Handles resolution callbacks.
	 */
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == REQUEST_CODE_SIGN_IN) {
			if (resultCode == RESULT_OK) {
				Snackbar.make(rfaBtn, "Please Wait.......It may take some time", Snackbar.LENGTH_LONG).show();
				initializeDriveClient(GoogleSignIn.getLastSignedInAccount(this));
			} else if (resultCode == RESULT_CANCELED) {
				Toast.makeText(getBaseContext(), R.string.sign_in_alert, Toast.LENGTH_SHORT).show();
			} else {
				Toast.makeText(getBaseContext(), R.string.sign_fail, Toast.LENGTH_SHORT).show();
			}
		}
	}

	private void writeCredentialDataToDrive(final String data) {
		final Task<DriveFolder> appFolderTask = mDriveResourceClient.getAppFolder();
		final Task<DriveContents> createContentsTask = mDriveResourceClient.createContents();

		Tasks.whenAll(appFolderTask, createContentsTask)
				.continueWithTask(task -> {
					DriveFolder parent = appFolderTask.getResult();

					DriveContents contents = createContentsTask.getResult();
					OutputStream outputStream = null;
					if (contents != null) {
						outputStream = contents.getOutputStream();
					}

					if (outputStream != null) {
						try (Writer writer = new OutputStreamWriter(outputStream)) {
							writer.write(data);
						}
					}

					MetadataChangeSet changeSet = new MetadataChangeSet.Builder()
							.setTitle(driveFileName)
							.setMimeType("text/plain")
							.setStarred(true)
							.build();

					if (parent != null) {
						return mDriveResourceClient.createFile(parent, changeSet, contents);
					} else {
						return null;
					}
				})
				.addOnSuccessListener(this,
						driveFile -> Toast.makeText(getApplicationContext(), "Credentials Uploaded", Toast.LENGTH_SHORT).show())
				.addOnFailureListener(this, e -> {
					Toast.makeText(getApplicationContext(), "Credentials Upload Failed", Toast.LENGTH_SHORT).show();
					finish();
				});
	}

	private void listAndDoOperation(DriveFolder folder, final int specialRequestCode) {
		Query query = new Query.Builder()
				.addFilter(Filters.eq(SearchableField.MIME_TYPE, "text/plain"))
				.build();
		Task<MetadataBuffer> queryTask = getDriveResourceClient().queryChildren(folder, query);
		queryTask.addOnSuccessListener(this,
				metadataBuffer -> {
					if (metadataBuffer.getCount() == 0) {
						if (specialRequestCode == writeSpecialRequestCode) {
							if (!(Utils.userName(getBaseContext()) == null | Utils.passWord(getBaseContext()) == null)) {
								writeCredentialDataToDrive(Utils.upFormatter(getBaseContext()));
							}
						}
					} else if (metadataBuffer.getCount() == 1) {
						if (metadataBuffer.get(0).getOriginalFilename().replaceAll("\\s+", "").equals(driveFileName)) {
							if (specialRequestCode == readSpecialRequestCode) {
								retrieveContents(metadataBuffer.get(0).getDriveId().asDriveFile());
							} else if (specialRequestCode == writeSpecialRequestCode) {
								new AlertDialog.Builder(MainActivity.this)
										.setTitle("Alert!")
										.setMessage("Previously stored credentials are found")
										.setPositiveButton("Overwrite", (e, f) -> {
											e.dismiss();
											deleteFile(metadataBuffer.get(0).getDriveId().asDriveFile());
											if (!(Utils.userName(getBaseContext()) == null | Utils.passWord(getBaseContext()) == null)) {
												writeCredentialDataToDrive(Utils.upFormatter(getBaseContext()));
											}
										})
										.setNegativeButton("Restore", (g, h) -> {
											g.dismiss();
											tryLogin = true;
											MainActivity.specialRequestCode = readSpecialRequestCode;
										})
										.show();
							}
						} else {
							deleteFile(metadataBuffer.get(0).getDriveId().asDriveFile());
						}
					} else if (metadataBuffer.getCount() > 1) {
						//show Duplicate Files dialog and say to delete those files and update credentials
						if (specialRequestCode == readSpecialRequestCode) {
							retrieveContents(metadataBuffer.get(metadataBuffer.getCount() - 1).getDriveId().asDriveFile());
							for (int i = 0; i < (metadataBuffer.getCount() - 1); i++) {
								deleteFile(metadataBuffer.get(i).getDriveId().asDriveFile());
							}
						} else if (specialRequestCode == writeSpecialRequestCode) {
							for (int i = 0; i < metadataBuffer.getCount(); i++) {
								deleteFile(metadataBuffer.get(i).getDriveId().asDriveFile());
							}
							if (!(Utils.userName(getBaseContext()) == null | Utils.passWord(getBaseContext()) == null)) {
								if (!(Utils.userName(getBaseContext()) == null | Utils.passWord(getBaseContext()) == null)) {
									writeCredentialDataToDrive(Utils.upFormatter(getBaseContext()));
								}
							}
						}
					}
				})
				.addOnFailureListener(this, e -> Toast.makeText(MainActivity.this, "Error connecting Google Drive", Toast.LENGTH_SHORT).show());
	}

	private void retrieveContents(DriveFile file) {
		Task<DriveContents> openFileTask = getDriveResourceClient().openFile(file, DriveFile.MODE_READ_ONLY);
		openFileTask.continueWithTask(task -> {
			DriveContents contents = task.getResult();
			if (contents != null) {
				try (BufferedReader reader = new BufferedReader(
						new InputStreamReader(contents.getInputStream()))) {
					StringBuilder builder = new StringBuilder();
					String line;
					while ((line = reader.readLine()) != null) {
						builder.append(line).append("\n");
					}
					saveDataOnLocalDB(builder.toString());
				}
			}
			if (contents != null) {
				return getDriveResourceClient().discardContents(contents);
			}
			return null;
		}).addOnFailureListener(e -> Toast.makeText(MainActivity.this, "Unable to read from Google Drive", Toast.LENGTH_SHORT).show());
	}

	private void saveDataOnLocalDB(String all) {

		final String usr = Utils.userSplicedString(all);
		final String pwd = Utils.pwdSplicedString(all);

		new AlertDialog.Builder(MainActivity.this)
				.setTitle("Credentials Found")
				.setMessage("Restore Credentials Found? " +
						"\n User :" + replaceFirstNumAndFormat(usr, 6) + "\n Password:" +
						replaceFirstNumAndFormat(pwd, 6))
				.setPositiveButton("Yes", (dialog, which) -> {
					DataMan.getInstance(getBaseContext()).setUser(usr);
					DataMan.getInstance(getBaseContext()).setPassword(pwd);
					if (!MainActivity.buildFinal) {
						Logger.log(usr + "/" + pwd);
					}
					Toast.makeText(getBaseContext(), "Credentials Restored", Toast.LENGTH_SHORT).show();
				}).show();

		specialRequestCode = 0x0C;
	}

	private void deleteFile(DriveFile file) {
		getDriveResourceClient()
				.delete(file)
				.addOnSuccessListener(this,
						aVoid -> Logger.log("deleteDone"))
				.addOnFailureListener(this, e -> Logger.log("Unable to delete file" + e.toString()));
	}

	@Override
	public void onDrawerSlide(@NonNull View view, float v) {

	}

	@Override
	public void onDrawerOpened(@NonNull View view) {
		chosen = 2991;
	}

	@Override
	public void onDrawerClosed(@NonNull View view) {
		Bundle anim = ActivityOptions.makeCustomAnimation(
				getApplicationContext(), R.anim.firstmove, R.anim.lastmove).toBundle();
		if (chosen == CHOOSE_SETTINGS) {
			startActivity(new Intent(MainActivity.this, SettingsActivity.class), anim);
		} else if (chosen == CHOOSE_THEME) {
			startActivity(new Intent(MainActivity.this, ThemeActivity.class), anim);
		} else if (chosen == CHOOSE_ABOUT) {
			startActivity(new Intent(MainActivity.this, AboutActivity.class), anim);
		} else if (chosen == CHOOSE_SHARE) {
			Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);
			sharingIntent.setType("text/plain");
			sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, R.string.about_body +
					"https://play.google.com/store/apps/details?id=" + BuildConfig.APPLICATION_ID);
			startActivity(Intent.createChooser(sharingIntent, "Share about Login"));
		}
	}

	@Override
	public void onDrawerStateChanged(int i) {

	}

	private void doCheck() {
		mChecker.checkAccess(mLicenseCheckerCallback);
	}

	private static class PostMan extends BroadcastReceiver {

		private final Handler handler; // Handler used to execute code on the UI thread
		private final RFACLabelItem fab;
		private final RapidFloatingActionHelper fabHelper;

		public PostMan(Handler handler, RFACLabelItem item, RapidFloatingActionHelper helper) {
			this.handler = handler;
			this.fab = item;
			this.fabHelper = helper;
		}

		@Override
		public void onReceive(final Context context, final Intent intent) {
			if (intent.getAction() != null) {
				if (intent.getAction().equals("android.net.wifi.STATE_CHANGE")) {
					handler.post(() -> {
						if (((WifiManager) context.getApplicationContext().getSystemService(WIFI_SERVICE))
								.isWifiEnabled()) {
							fab.setResId(R.drawable.wifi_down);
							LocalBroadcastManager.getInstance(context.getApplicationContext()).sendBroadcast(new Intent(LOGIN_FAILURE));
						} else {
							fab.setResId(R.drawable.wifi_up);
						}
						fabHelper.build();
					});
				}
			}
		}
	}

	private static class SignalMan extends BroadcastReceiver {

		private static int LOGIN_FAILURE_BUGFIX_TRIGGER = -1;
		private final Handler handler; // Handler used to execute code on the UI thread
		private final LinearLayout graphView, pingCtrl;
		private final RFACLabelItem item0;
		private final RapidFloatingActionHelper fabHelper;

		public SignalMan(Handler handler,
						 LinearLayout graph_View, LinearLayout pingControl,
						 RFACLabelItem item, RapidFloatingActionHelper helper) {
			this.handler = handler;
			this.graphView = graph_View;
			this.pingCtrl = pingControl;
			this.item0 = item;
			this.fabHelper = helper;
		}

		@Override
		public void onReceive(final Context context, final Intent intent) {
			if (intent != null) {
				if (intent.getAction() != null) {
					if (intent.getAction().equals(LOGIN_FAILURE)) {
						handler.post(() -> {
							if (LOGIN_FAILURE_BUGFIX_TRIGGER == 0) {
								graphView.setVisibility(View.INVISIBLE);
								pingCtrl.setVisibility(View.INVISIBLE);
								item0.setResId(R.drawable.ic_connect);
								fabHelper.build();
							} else {
								LOGIN_FAILURE_BUGFIX_TRIGGER++;
							}
						});
						LOGIN_STATE = false;
					} else if (intent.getAction().equals(LOGIN_SUCCESS)) {
						handler.post(() -> {
							if (DataMan.getInstance(context).isGraphEnabled()) {
								pingCtrl.setVisibility(View.VISIBLE);
								graphView.setVisibility(View.VISIBLE);
							}
							item0.setResId(R.drawable.ic_disconnect);
							fabHelper.build();
						});
						LOGIN_STATE = true;
					}
				}
			}
		}
	}

	private class LicenseChecker implements LicenseCheckerCallback {
		public void allow(int policyReason) {
			if (isFinishing()) {
				return;
			}
			if (policyReason == Policy.LICENSED) {
				DataMan.getInstance(getBaseContext()).setIsLicenseVerified(true);
				Toast.makeText(MainActivity.this, "License Verified", Toast.LENGTH_SHORT).show();
			}
		}

		public void dontAllow(int policyReason) {
			if (isFinishing()) {
				return;
			}
			if (policyReason == Policy.NOT_LICENSED && !Utils.isFreshAndHealthy(getApplicationContext())) {
				DataMan.getInstance(getBaseContext()).setIsLicenseVerified(false);
				Toast.makeText(MainActivity.this, "License Error , exiting", Toast.LENGTH_LONG).show();
				finish();
			}
		}

		public void applicationError(int errorCode) {
			if (isFinishing()) {
				return;
			}
			DataMan.getInstance(getBaseContext()).setIsLicenseVerified(false);
			Toast.makeText(MainActivity.this, "License Error", Toast.LENGTH_LONG).show();
			try {
				if (UpdatedStatus.executePing("8.8.8.8", "1") == 0 && !Utils.isFreshAndHealthy(getApplicationContext())) {
					finish();
				} else {
					//log exception
				}
			} catch (IOException | InterruptedException | TimeoutException e) {
				e.printStackTrace();
			}
		}
	}
}
