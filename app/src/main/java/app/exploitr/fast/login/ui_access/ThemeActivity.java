package app.exploitr.fast.login.ui_access;

import android.content.Intent;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.os.Bundle;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.style.ForegroundColorSpan;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import com.jaredrummler.android.colorpicker.ColorPickerDialog;
import com.jaredrummler.android.colorpicker.ColorPickerDialogListener;

import app.exploitr.fast.login.R;
import app.exploitr.fast.login.utils.DataMan;
import de.hdodenhof.circleimageview.CircleImageView;

public class ThemeActivity extends AppCompatActivity implements ColorPickerDialogListener {
 
    CircleImageView toolbar, toolText, status, logText, progress;
    LinearLayout click, clickText, clickStatus, clickLog, clickProgress;
    Button applyAll;
 
    int TOOLBAR = 0, TEXTTOOL = 1, STATUS = 2, LOG = 3, PRO = 4;
    int setT, setTT, setS, setL, setPro;
 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_theme);
 
        toolbar = findViewById(R.id.tool_color);
        toolText = findViewById(R.id.tool_color_text);
        status = findViewById(R.id.status_color);
        logText = findViewById(R.id.log_color);
        progress = findViewById(R.id.prog_color);
 
        click = findViewById(R.id.click_toolbar);
        clickText = findViewById(R.id.click_toolbar_text);
        clickStatus = findViewById(R.id.click_status);
        clickLog = findViewById(R.id.click_log);
        clickProgress = findViewById(R.id.click_prog);
 
        applyAll = findViewById(R.id.apply_btn);
 
        if (getSupportActionBar() != null) {
            Spannable text = new SpannableString("Customize Login");
            text.setSpan(new ForegroundColorSpan(DataMan.getInstance(getBaseContext()).getTitleThemeColor()), 0, text.length(), Spannable.SPAN_INCLUSIVE_INCLUSIVE);
            getSupportActionBar().setTitle(text);
        }
 
 
        Toast.makeText(getBaseContext(), "Click to change", Toast.LENGTH_SHORT).show();
 
 
        setT = DataMan.getInstance(getBaseContext()).getThemeColor();
        setTT = DataMan.getInstance(getBaseContext()).getTitleThemeColor();
        setS = DataMan.getInstance(getBaseContext()).getStatusThemeColor();
        setL = DataMan.getInstance(getBaseContext()).getLogThemeColor();
        setPro = DataMan.getInstance(getBaseContext()).getProgressThemeColor();
 
        toolbar.setColorFilter(setT, PorterDuff.Mode.SRC_ATOP);
        toolText.setColorFilter(setTT, PorterDuff.Mode.SRC_ATOP);
        status.setColorFilter(setS, PorterDuff.Mode.SRC_ATOP);
        logText.setColorFilter(setL, PorterDuff.Mode.SRC_ATOP);
        progress.setColorFilter(setPro, PorterDuff.Mode.SRC_ATOP);
 
 
        click.setOnClickListener(v -> launch(TOOLBAR));
 
        clickText.setOnClickListener(v -> launch(TEXTTOOL));
 
        clickStatus.setOnClickListener(v -> launch(STATUS));
 
        clickLog.setOnClickListener(v -> launch(LOG));
 
        clickProgress.setOnClickListener(v -> launch(PRO));
 
        applyAll.setOnClickListener(v -> {
            DataMan.getInstance(getBaseContext()).setThemeColor(setT);
            DataMan.getInstance(getBaseContext()).setTitleThemeColor(setTT);
            DataMan.getInstance(getBaseContext()).setLogThemeColor(setL);
            DataMan.getInstance(getBaseContext()).setStatusThemeColor(setS);
            DataMan.getInstance(getBaseContext()).setProgressThemeColor(setPro);

            new AlertDialog.Builder(ThemeActivity.this)
                    .setTitle("Alert")
                    .setMessage("Application Needs To Be Restarted")
                    .setCancelable(false)
                    .setPositiveButton("Okay", (dialog, which) -> {
                        Intent intent = new Intent(ThemeActivity.this, MainActivity.class);
                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        startActivity(intent);
                    }).show();
        });
    }
 
    private void launch(int id) {
        ColorPickerDialog.newBuilder()
                .setColor(Color.parseColor("#AD1457"))
                .setShowAlphaSlider(false)
                .setShowColorShades(false)
                .setAllowCustom(true)
                .setDialogId(id)
                .show(ThemeActivity.this);
    }
 
    @Override
    public void onColorSelected(int dialogId, int color) {
        if (dialogId == 0) {
            setT = color;
            toolbar.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);
        } else if (dialogId == 1) {
            setTT = color;
            toolText.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);
        } else if (dialogId == 2) {
            setS = color;
            status.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);
        } else if (dialogId == 3) {
            setL = color;
            logText.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);
        } else if (dialogId == 4) {
            setPro = color;
            progress.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);
        }
    }
 
    @Override
    public void onDialogDismissed(int dialogId) {
    }
 
    @Override
    public void finish() {
        super.finish();
        overridePendingTransition(0, R.anim.end_slide_out);
    }
}