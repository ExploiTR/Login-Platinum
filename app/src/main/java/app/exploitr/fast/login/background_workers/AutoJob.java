package app.exploitr.fast.login.background_workers;


import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Build;

import androidx.annotation.NonNull;
import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;

import com.evernote.android.job.Job;
import com.evernote.android.job.JobRequest;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import app.exploitr.fast.login.R;
import app.exploitr.fast.login.connectors.NonAwareLogin;
import app.exploitr.fast.login.connectors.UpdatedStatus;
import app.exploitr.fast.login.ui_access.MainActivity;
import app.exploitr.login.platinum.helpers.Constants;
import app.exploitr.fast.login.utils.DataMan;
import app.exploitr.fast.login.utils.Utils;

public class AutoJob extends Job implements Constants {
 
    public static final String TAG = "check_login";
    private static final int NOTIFICATION_ID = 563;
 
    public static void schedulePeriodic() {
        new JobRequest.Builder(AutoJob.TAG)
                .setPeriodic(TimeUnit.MINUTES.toMillis(15))
                .setRequiredNetworkType(JobRequest.NetworkType.CONNECTED)
                .setRequirementsEnforced(true)
                .setUpdateCurrent(true)
                .build()
                .schedule();
    }
 
    public static void showNotification(String title, String message, Context context, long timeout) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationManager notificationManager =
                    (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
            String channelId = "conn_check_channel_id";
            CharSequence channelName = "Background Check Notification";
            NotificationChannel notificationChannel = new NotificationChannel(channelId, channelName,
                    NotificationManager.IMPORTANCE_MIN);
            notificationChannel.enableVibration(true);
            notificationChannel.setVibrationPattern(new long[]{100});
            if (notificationManager != null) {
                notificationManager.createNotificationChannel(notificationChannel);
            }
 
            Notification notification = new Notification.Builder(context, notificationChannel.getId())
                    .setContentTitle(title)
                    .setAutoCancel(false)
                    .setStyle(new Notification.BigTextStyle().bigText(message))
                    .setContentIntent(PendingIntent.getActivity(context, 0, new Intent(context, MainActivity.class), 0))
                    .setSmallIcon(R.drawable.ic_wifi_check_foreground)
                    .setShowWhen(false)
                    .setTimeoutAfter(timeout)
                    .setLocalOnly(false)
                    .build();
 
            if (DataMan.getInstance(context).getNotificationsEnabled()) {
                if (notificationManager != null) {
                    notificationManager.notify(NOTIFICATION_ID, notification);
                }
            }
 
        } else {
            NotificationManagerCompat.from(context).cancelAll();
            Notification notification = new NotificationCompat.Builder(context, Constants.NOTIFICATION_CHANNEL)
                    .setContentTitle(title)
                    .setAutoCancel(false)
                    .setStyle(new NotificationCompat.BigTextStyle().bigText(message))
                    .setContentIntent(PendingIntent.getActivity(context, 0, new Intent(context, MainActivity.class), 0))
                    .setSmallIcon(R.drawable.ic_wifi_check_foreground)
                    .setShowWhen(true)
                    .setTimeoutAfter(timeout)
                    .setLocalOnly(false)
                    .build();
            if (DataMan.getInstance(context).getNotificationsEnabled()) {
                NotificationManagerCompat.from(context).notify(NOTIFICATION_ID, notification);
            }
        }
    }
 
    @Override
    @NonNull
    protected Result onRunJob(@NonNull Params params) {
        if (Utils.isWifiActuallyConnected(getContext()) && !DataMan.getInstance(getContext()).isLoggedOut()) {
            int integer = 2000;
            try {
                integer = UpdatedStatus.executePing(DataMan.getInstance(getContext()).getPingAddress(), DataMan.getInstance(getContext()).getPingAttemptsCount());
            } catch (IOException | InterruptedException | TimeoutException e) {
                e.getSuppressed();
                e.printStackTrace();
            }
            if (integer < 1) {
                showNotification(Constants.CONNECTION_OK, Constants.NEXT_SCHEDULE_INF, getContext(),
                        TimeUnit.SECONDS.toMillis(15));
            } else if (integer <= Integer.parseInt(DataMan.getInstance(getContext()).getPingAttemptsCount())) {
                showNotification(Constants.CONNECTION_OK, Constants.NEXT_SCHEDULE_WARNING_PING_LOSS, getContext(),
                        TimeUnit.SECONDS.toMillis(25));
            } else {
                showNotification(Constants.CONNECTION_ERR, Constants.LOGIN_TRIAL, getContext(),
                        TimeUnit.MINUTES.toMillis(2));
                NonAwareLogin.connect(getContext());
            }
        }
        
        if (DataMan.getInstance(getContext()).getPureAutoLogin()) {
            if (!Utils.isServiceRunning(AlwaysOnService.class, getContext()) && (DataMan.getInstance(getContext()).getUser() != null
                    || DataMan.getInstance(getContext()).getPassword() != null)) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    getContext().startForegroundService(new Intent(getContext(), AlwaysOnService.class));
                } else {
                    getContext().startService(new Intent(getContext(), AlwaysOnService.class));
                }
            }
        }
        return Result.SUCCESS;
    }
 
}