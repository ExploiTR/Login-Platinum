package app.exploitr.fast.login.utils;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.Build;
import android.preference.PreferenceManager;

import com.scottyab.aescrypt.AESCrypt;

import java.security.GeneralSecurityException;

public class DataMan {

	private static final String PING_ATTEMPTS = "ping_";
	private static final String PASSWORD = "pwd_";
	private static final String USER_NAME = "usr_";
	private static final String PING_ADDRESS = "pinging";
	private static final String AUTO_VISIBLE = "autonomic";
	private static final String LOG_COLOR = "log_button_color";
	private static final String TITLE_THEME = "title_theme_color";
	private static final String STATUS_COLOR = "status_color";
	private static final String MAIN_THEME_COLOR = "_theme_color";
	private static final String PROGRESS_COLOR = "progress_theme_color";
	private static final String AUTO_INVISIBLE = "automatic_full";
	private static final String PERIODIC_LOGIN = "periodic_check";
	private static final String NOTIFICATIONS_ENABLED = "do_notifications";
	private static final String GRAPH_ENABLED = "graph_enabled";
	private static final String IS_LOGGED_OUT = "logged_out";
	private static final String IS_NEW = "very_old";
	private static final String IS_SPLASH_NEW = "_splash";
	private static final String IS_LICENSE_VERIFIED = "_nolint";

	//highlight Plat Changes
	private static final String PROFILE_CONFIG_VERSION = "config_version";

	private static final String[] SUPPORTED_ABI_TYPES = {"i386",
			"x86_64",
			"arm",
			"armhf",
			"aarch64"};

	//highlight Plat Changes

	private static DataMan instance;
	private final SharedPreferences save;

	private DataMan(Context context) {
		save = PreferenceManager.getDefaultSharedPreferences(context);
	}

	public static DataMan getInstance(Context context) {
		if (instance == null) {
			instance = new DataMan(context);
		}
		return instance;
	}

	public String getPingAttemptsCount() {
		return save.getString(PING_ATTEMPTS, String.valueOf(1));
	}

	public void setPingAttempts(String attemptingInt) {
		save.edit().putString(PING_ATTEMPTS, attemptingInt).apply();
	}

	/*Get decrypted user password*/
	public String getPassword() {
		String pass = save.getString(PASSWORD, "");
		if (pass != null && !pass.equals("")) {
			try {
				pass = AESCrypt.decrypt(Build.FINGERPRINT, pass);
			} catch (GeneralSecurityException e) {
				e.printStackTrace();
			}
		} else {
			return "";
		}
		return pass;
	}

	/*Encrypts and Saves Password*/
	public void setPassword(String pass) {
		if (!pass.equals("")) {
			try {
				save.edit().putString(PASSWORD, AESCrypt.encrypt(Build.FINGERPRINT, pass)).apply();
			} catch (GeneralSecurityException e) {
				e.printStackTrace();
			}
		} else {
			save.edit().putString(PASSWORD, pass).apply();
		}
	}

	/*Get decrypted user password*/
	public String getUser() {
		String usr = save.getString(USER_NAME, "");
		if (usr != null && !usr.equals("")) {
			try {
				usr = AESCrypt.decrypt(Build.FINGERPRINT, usr);
			} catch (GeneralSecurityException e) {
				e.printStackTrace();
			}
		} else {
			return "";
		}
		return usr;
	}

	/*Encrypts and Saves UserID*/
	public void setUser(String user) {
		if (!user.equals("")) {
			try {
				save.edit().putString(USER_NAME, AESCrypt.encrypt(Build.FINGERPRINT, user)).apply();
			} catch (GeneralSecurityException e) {
				e.printStackTrace();
				e.getSuppressed();
			}
		} else {
			save.edit().putString(USER_NAME, user).apply();
		}
	}

	public String getPingAddress() {
		return save.getString(PING_ADDRESS, "google.com");
	}

	public void setPingAddress(String ipAddress) {
		save.edit().putString(PING_ADDRESS, ipAddress).apply();
	}

	/*return autoLogin requirement*/
	public boolean isAutoL() {
		return save.getBoolean(AUTO_VISIBLE, true);
	}

	/*Saves autoLogin requires or not*/
	public void setAutoL(boolean decs) {
		save.edit().putBoolean(AUTO_VISIBLE, decs).apply();
	}

	/*Getters for getting theme colours*/
	public int getTitleThemeColor() {
		return save.getInt(TITLE_THEME, Color.parseColor("#FFFFFF"));
	}

	/*Setters for setting theme colours*/
	public void setTitleThemeColor(int what) {
		save.edit().putInt(TITLE_THEME, what).apply();
	}

	public int getLogThemeColor() {
		return save.getInt(LOG_COLOR, Color.parseColor("#FFFFFF"));
	}

	public void setLogThemeColor(int what) {
		save.edit().putInt(LOG_COLOR, what).apply();
	}

	public int getStatusThemeColor() {
		return save.getInt(STATUS_COLOR, Color.parseColor("#000000"));
	}

	public void setStatusThemeColor(int what) {
		save.edit().putInt(STATUS_COLOR, what).apply();
	}

	public int getThemeColor() {
		return save.getInt(MAIN_THEME_COLOR, Color.parseColor("#1A237E"));
	}

	public void setThemeColor(int what) {
		save.edit().putInt(MAIN_THEME_COLOR, what).apply();
	}

	public int getProgressThemeColor() {
		return save.getInt(PROGRESS_COLOR, Color.parseColor("#ff2539"));
	}

	public void setProgressThemeColor(int what) {
		save.edit().putInt(PROGRESS_COLOR, what).apply();
	}

	public boolean getPureAutoLogin() {
		return save.getBoolean(AUTO_INVISIBLE, true);
	}

	public void setPureAutoLogin(boolean status) {
		save.edit().putBoolean(AUTO_INVISIBLE, status).apply();
	}

	public boolean getPeriodic() {
		return save.getBoolean(PERIODIC_LOGIN, true); // :-P
	}

	public void setPeriodic(boolean status) {
		save.edit().putBoolean(PERIODIC_LOGIN, status).apply();
	}

	public boolean getNotificationsEnabled() {
		return save.getBoolean(NOTIFICATIONS_ENABLED, true);
	}

	public void setNotificationsEnabled(boolean notificationsEnabled) {
		save.edit().putBoolean(NOTIFICATIONS_ENABLED, notificationsEnabled).apply();
	}

	public boolean isGraphEnabled() {
		return save.getBoolean(GRAPH_ENABLED, true);
	}

	public void setGraphEnabled(boolean what) {
		save.edit().putBoolean(GRAPH_ENABLED, what).apply();
	}

	public boolean isLoggedOut() {
		return save.getBoolean(IS_LOGGED_OUT, false);
	}

	public void setLogoutState(boolean what) {
		save.edit().putBoolean(IS_LOGGED_OUT, what).apply();
	}

	public boolean isNew() {
		return save.getBoolean(IS_NEW, true);
	}

	public void setOLD() {
		save.edit().putBoolean(IS_NEW, false).apply();
	}

	public boolean isSplashNew() {
		return save.getBoolean(IS_SPLASH_NEW, true);
	}

	public void setSplashOld() {
		save.edit().putBoolean(IS_SPLASH_NEW, false).apply();
	}

	public void setIsLicenseVerified(boolean state) {
		save.edit().putBoolean(IS_LICENSE_VERIFIED, state).apply();
	}

	public boolean isLicenseVerified() {
		return save.getBoolean(IS_LICENSE_VERIFIED, false);
	}


	//highlight Plat Changes

	public void updateConfigVersion(int ver) {
		save.edit().putInt(PROFILE_CONFIG_VERSION, ver).apply();
	}

	public int getConfigVersion() {
		return save.getInt(PROFILE_CONFIG_VERSION, 0);
	}
}


