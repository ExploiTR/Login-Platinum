package app.exploitr.fast.login.ui_access;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.style.ForegroundColorSpan;
import android.view.View;
import android.widget.ScrollView;
import android.widget.TextView;

import app.exploitr.fast.login.BuildConfig;
import app.exploitr.fast.login.R;
import app.exploitr.login.platinum.helpers.Constants;
import app.exploitr.fast.login.utils.DataMan;
import de.psdev.licensesdialog.LicensesDialog;
import de.psdev.licensesdialog.licenses.ApacheSoftwareLicense20;
import de.psdev.licensesdialog.model.Notice;
import de.psdev.licensesdialog.model.Notices;

public class AboutActivity extends Activity implements Constants {

    private Notices notices;

    @SuppressLint("SetTextI18n")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_about);

        notices = new Notices();
        for (int i = 0; i < dependencies.length; i++) {
            notices.addNotice(new Notice(dependencies[i], urls[i], copyrights[i], new ApacheSoftwareLicense20()));
        }

        findViewById(R.id.osl).setOnClickListener(v -> new LicensesDialog.Builder(AboutActivity.this)
                .setNotices(notices)
                .setIncludeOwnLicense(true)
                .setThemeResourceId(R.style.AppTheme)
                .build()
                .show());
        Spannable string = new SpannableString("Application ID : " + BuildConfig.APPLICATION_ID + "\n"
                + "Build Type : " + BuildConfig.BUILD_TYPE + "\n"
                + "Version Name : " + BuildConfig.VERSION_NAME + "\n"
                + "Version Code : " + BuildConfig.VERSION_CODE + "\n"
                + "License Verification Status : " +
                (DataMan.getInstance(getBaseContext()).isLicenseVerified() ? "OK":"ERROR"));

        if(DataMan.getInstance(getBaseContext()).isLicenseVerified()){
            string.setSpan(new ForegroundColorSpan(Color.GREEN), string.length() - 3, string.length(),
                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }else{
            string.setSpan(new ForegroundColorSpan(Color.RED), string.length() - 6, string.length(),
                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        ((TextView) findViewById(R.id.vInfo)).setText(
                string
        );

        ScrollView scrollView = findViewById(R.id.scroller);
        scrollView.getViewTreeObserver()
                .addOnScrollChangedListener(() -> {
                    if (scrollView.getChildAt(0).getBottom()
                            <= (scrollView.getHeight() + scrollView.getScrollY())) {
                        findViewById(R.id.osl).setVisibility(View.VISIBLE);
                    } else {
                        findViewById(R.id.osl).setVisibility(View.INVISIBLE);
                    }
                });

    }

    @Override
    public void finish() {
        super.finish();
        overridePendingTransition(0, R.anim.end_slide_out);
    }
}