package app.exploitr.fast.login.utils;

import android.app.ActivityManager;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;

import androidx.annotation.NonNull;

import org.apache.commons.validator.routines.DomainValidator;
import org.apache.commons.validator.routines.InetAddressValidator;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/*
 * Passed all small tasks to this class to minify boiler-plate at main
 * */
public class Utils {

    public static String boaTheSnake = "Error : Can't get IP Address"; // only cause my personal code

    /*Easygoing to write once*/
    public static String userName(Context context) {
        return DataMan.getInstance(context).getUser();
    }

    /*Easygoing to write once*/
    public static String passWord(Context context) {
        return DataMan.getInstance(context).getPassword();
    }

    public static boolean isFreshAndHealthy(Context context) {
        try {
            final ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(
                    context.getPackageName(), 0);
            return ("com.android.vending".equals(context.getPackageManager().getInstallerPackageName(applicationInfo.packageName)));
        } catch (final PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        return false;
    }

    /*Format in easy algorithm usr and pwd both to upload to Google Drive*/
    @NonNull
    public static String upFormatter(Context context) {
        return "usr:" + userName(context) + "," + "pwd:" + passWord(context);
    }

    /*Return username from formatted string containing both usr and pwd*/
    public static String userSplicedString(String totalFormattedString) {
        return (totalFormattedString.split(",")[0]).split(":")[1].replaceAll("\\s+", "");
    }

    /*Return password from formatted string containing both usr and pwd*/
    public static String pwdSplicedString(String totalFormattedString) {
        return (totalFormattedString.split(",")[1]).split(":")[1].replaceAll("\\s+", "");
    }

    /*Checks if device is connected to a network*/
    public static boolean isNetworkAvailable(Context context) {
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager != null ? connectivityManager.getActiveNetworkInfo() : null;
        return (activeNetworkInfo != null && activeNetworkInfo.isConnected());
    }

    public static boolean isWifiActuallyConnected(Context notApplicationContext) {
        try {
            ConnectivityManager connectivityManager = (ConnectivityManager) notApplicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
            WifiManager manager = (WifiManager) notApplicationContext.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
            return manager != null && connectivityManager != null && manager.isWifiEnabled() && connectivityManager.getActiveNetworkInfo().isConnected();
        } catch (Exception e) {
            return false;
        }
    }

    /*Validates String as IP Address....*/
    public static boolean validIP(String ip) {
        return InetAddressValidator.getInstance().isValid(ip) ||
                InetAddressValidator.getInstance().isValidInet4Address(ip) ||
                DomainValidator.getInstance().isValid(ip);
    }

    public static boolean validNumber(String number) {
        try {
            int i = Integer.parseInt(number);
            System.out.println(i);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    public static boolean isServiceRunning(Class<?> serviceClass, Context context) {
        ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        if (manager != null) {
            for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
                if (serviceClass.getName().equals(service.service.getClassName())) {
                    return true;
                }
            }
        }
        return false;
    }

    public static String returnPingOut(Process process) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;

        while ((line = in.readLine()) != null) {
            if (line.contains("time")) {
                System.out.println(line);
                String[] parts = line.split("time=");
                String[] parts0 = parts[1].split(" ms");
                return parts0[0] + "f";
            }
        }
        process.waitFor();
        in.close();
        return "125f";
    }

    public static boolean bigRAM(Context context) {
        //my 2968215552
        ActivityManager actManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        ActivityManager.MemoryInfo memInfo = new ActivityManager.MemoryInfo();
        if (actManager != null) {
            actManager.getMemoryInfo(memInfo);
        }
        return memInfo.totalMem >= 2000000000L;
    }

    @NonNull
    public static String replaceFirstNumAndFormat(String s, int start) {
        int length = s.length();
        if (length < start) return "";
        return " ******" + s.substring(start, length);
    }

    /*
     * Determination of RAM availability
     *
     * if 3000 mb available , then max number of
     * lines in snakeView will be 3*2 = 6
     *
     * like, for 1GB of ram , 1*2 = 2
     * */
    public static int maxOscillations(Context context) {
        ActivityManager actManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        ActivityManager.MemoryInfo memInfo = new ActivityManager.MemoryInfo();
        actManager.getMemoryInfo(memInfo);

        long totalMemory = memInfo.totalMem - 200000000;
        // 2968231936 - 200000000 = 2768231936// | cut up val like 1.1GB

        double kb = (double) totalMemory / 1024;               // 2768231
        double mb = kb / 1024;                        // 2768
        double checker = mb / 1000;                   // 2.768
        checker = Math.ceil(checker);               // 3.000
        return (int) checker;
    }
}