package app.exploitr.fast.login.background_workers;


import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import androidx.core.app.NotificationManagerCompat;

import java.io.IOException;
import java.util.Calendar;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import app.exploitr.fast.login.connectors.NonAwareLogin;
import app.exploitr.fast.login.connectors.UpdatedStatus;
import app.exploitr.login.platinum.helpers.Constants;
import app.exploitr.fast.login.utils.DataMan;
import app.exploitr.fast.login.utils.Logger;
import app.exploitr.fast.login.utils.Utils;

public class ClickReceiver extends BroadcastReceiver implements Constants {

    public static boolean shouldRun = true;
    public static boolean shouldStartAtBoot = true;

    @Override
    public void onReceive(final Context context, Intent intent) {
        if (intent != null && intent.getAction() != null) {
            String action = intent.getAction();
            if (action.equals(AlwaysOnService.stopALL)) {
                shouldRun = false;
                shouldStartAtBoot = false;
            } else if (action.equals("android.net.conn.CONNECTIVITY_CHANGE")) {
                DataMan.getInstance(context).setLogoutState(false);
                AsyncTask.execute(() -> {
                    if (Utils.isWifiActuallyConnected(context)) {
                        //<editor-fold desc="ExecutePing">
                        try {
                            if (UpdatedStatus.executePing(
                                    DataMan.getInstance(context).getPingAddress(),
                                    DataMan.getInstance(context).getPingAttemptsCount()) > 0) {
                                AutoJob.showNotification(WIFI_CONNECT_LOGIN_TRIAL, WAIT_MSG, context,
                                        TimeUnit.SECONDS.toMillis(5));
                                System.out.println(Calendar.getInstance().get(Calendar.SECOND));
                                NonAwareLogin.connect(context);
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                            e.getSuppressed();
                            NotificationManagerCompat.from(context).cancelAll();
                            AutoJob.showNotification(WIFI_CONNECT_LOGIN_FAILURE, IO_ERROR, context,
                                    TimeUnit.MINUTES.toMillis(2));
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                            e.getSuppressed();
                            NotificationManagerCompat.from(context).cancelAll();
                            AutoJob.showNotification(WIFI_CONNECT_LOGIN_FAILURE, WIFI_CONNECT_REASON_PROCESS, context,
                                    TimeUnit.MINUTES.toMillis(2));
                        } catch (TimeoutException e) {
                            e.printStackTrace();
                            e.getSuppressed();
                            NotificationManagerCompat.from(context).cancelAll();
                            AutoJob.showNotification(WIFI_CONNECT_LOGIN_FAILURE, WIFI_CONNECT_REASON_CIRCUIT, context,
                                    TimeUnit.MINUTES.toMillis(2));
                        }
                        //</editor-fold>
                    } else {
                        Logger.log(WIFI_NOT_CONNECTED);
                    }
                });
            }
        }
    }
}
