package app.exploitr.fast.login.background_workers;

import static app.exploitr.fast.login.ui_access.MainActivity.buildFinal;

import android.app.ActivityManager;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.drawable.Icon;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;

import androidx.annotation.Nullable;

import com.evernote.android.job.JobManager;

import app.exploitr.fast.login.R;
import app.exploitr.fast.login.utils.DataMan;

public class AlwaysOnService extends Service {

    public static final String stopALL = "_stopSelf";
    private static final BroadcastReceiver receiver = new ClickReceiver();

    public static boolean isNotMyServiceRunning(Class<?> serviceClass, Context ctx) {
        ActivityManager manager = (ActivityManager) ctx.getSystemService(Context.ACTIVITY_SERVICE);
        for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
            if (serviceClass.getName().equals(service.service.getClassName())) {
                return false;
            }
        }
        return true;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (DataMan.getInstance(getBaseContext()).getPureAutoLogin()) {
            registerReceiver(receiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
        } else {
            stopSelf();
        }

        Intent notificationCancelIntent = new Intent(this.getBaseContext(), ClickReceiver.class);
        notificationCancelIntent.setAction(stopALL);
        notificationCancelIntent.setClass(this.getApplicationContext(), ClickReceiver.class);
        PendingIntent notificationCancelPendingIntent =
                PendingIntent.getBroadcast(this.getBaseContext(), 0, notificationCancelIntent, 0);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationManager notificationManager =
                    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
            String channelId = "conn_check_channel_id";
            CharSequence channelName = "Background Check Notification";
            NotificationChannel notificationChannel = new NotificationChannel(channelId, channelName,
                    NotificationManager.IMPORTANCE_MIN);
            notificationChannel.enableVibration(true);
            notificationChannel.setVibrationPattern(new long[]{100});
            if (notificationManager != null) {
                notificationManager.createNotificationChannel(notificationChannel);
            }

            Notification notification = new Notification.Builder(this.getBaseContext(), notificationChannel.getId())
                    .setContentTitle("Watchdog Running")
                    .setStyle(new Notification.BigTextStyle().bigText("Connection is being monitored"))
                    .setSmallIcon(R.drawable.ic_watch)
                    .setShowWhen(false)
                    .setAutoCancel(false)
                    .addAction(new Notification.Action.Builder(
                            Icon.createWithResource(
                                    getBaseContext(),
                                    R.drawable.ic_stop_watchdog
                            ), "Stop", notificationCancelPendingIntent
                    ).build())
                    .setLocalOnly(false)
                    .build();

            startForeground(12, notification);
        }

        final Handler handler = new Handler();

        handler.post(new Runnable() {
            @Override
            public void run() {
                if (!ClickReceiver.shouldRun) {
                    stopForeground(true);
                    stopSelf();
                    //receiver is dead when context is dead~!
                }
                if (DataMan.getInstance(getApplicationContext()).isLoggedOut()) {
                    JobManager.instance().cancelAll();
                    stopForeground(true);
                    stopSelf();
                    //receiver is dead when context is dead~!
                }
                handler.postDelayed(this, 100);
            }
        });

        return Service.START_STICKY;
    }

    @Override
    public void onTaskRemoved(Intent rootIntent) {
        try {
            unregisterReceiver(receiver);
        } catch (Exception e) {
            if (buildFinal) {
                try {
                    //log crash
                } catch (Exception ignored) {
                }
            }
        }
        super.onTaskRemoved(rootIntent);
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

}
